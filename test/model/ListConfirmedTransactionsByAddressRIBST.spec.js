/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cryptoapis);
  }
}(this, function(expect, Cryptoapis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListConfirmedTransactionsByAddressRIBST', function() {
    it('should create an instance of ListConfirmedTransactionsByAddressRIBST', function() {
      // uncomment below and update the code to test ListConfirmedTransactionsByAddressRIBST
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be.a(Cryptoapis.ListConfirmedTransactionsByAddressRIBST);
    });

    it('should have the property bandwidthUsed (base name: "bandwidthUsed")', function() {
      // uncomment below and update the code to test the property bandwidthUsed
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property contract (base name: "contract")', function() {
      // uncomment below and update the code to test the property contract
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property energyUsed (base name: "energyUsed")', function() {
      // uncomment below and update the code to test the property energyUsed
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property hasInternalTransactions (base name: "hasInternalTransactions")', function() {
      // uncomment below and update the code to test the property hasInternalTransactions
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property hasTokenTransfers (base name: "hasTokenTransfers")', function() {
      // uncomment below and update the code to test the property hasTokenTransfers
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property inputData (base name: "inputData")', function() {
      // uncomment below and update the code to test the property inputData
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property internalTransactionsCount (base name: "internalTransactionsCount")', function() {
      // uncomment below and update the code to test the property internalTransactionsCount
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property tokenTransfersCount (base name: "tokenTransfersCount")', function() {
      // uncomment below and update the code to test the property tokenTransfersCount
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

    it('should have the property transactionStatus (base name: "transactionStatus")', function() {
      // uncomment below and update the code to test the property transactionStatus
      //var instance = new Cryptoapis.ListConfirmedTransactionsByAddressRIBST();
      //expect(instance).to.be();
    });

  });

}));
