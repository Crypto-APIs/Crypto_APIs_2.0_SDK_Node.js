/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cryptoapis);
  }
}(this, function(expect, Cryptoapis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetAssetDetailsByAssetIDRI', function() {
    it('should create an instance of GetAssetDetailsByAssetIDRI', function() {
      // uncomment below and update the code to test GetAssetDetailsByAssetIDRI
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be.a(Cryptoapis.GetAssetDetailsByAssetIDRI);
    });

    it('should have the property assetId (base name: "assetId")', function() {
      // uncomment below and update the code to test the property assetId
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property assetLogo (base name: "assetLogo")', function() {
      // uncomment below and update the code to test the property assetLogo
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property assetName (base name: "assetName")', function() {
      // uncomment below and update the code to test the property assetName
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property assetOriginalSymbol (base name: "assetOriginalSymbol")', function() {
      // uncomment below and update the code to test the property assetOriginalSymbol
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property assetSymbol (base name: "assetSymbol")', function() {
      // uncomment below and update the code to test the property assetSymbol
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property assetType (base name: "assetType")', function() {
      // uncomment below and update the code to test the property assetType
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property latestRate (base name: "latestRate")', function() {
      // uncomment below and update the code to test the property latestRate
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

    it('should have the property specificData (base name: "specificData")', function() {
      // uncomment below and update the code to test the property specificData
      //var instance = new Cryptoapis.GetAssetDetailsByAssetIDRI();
      //expect(instance).to.be();
    });

  });

}));
