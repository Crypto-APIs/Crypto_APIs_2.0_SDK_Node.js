/**
 * Crypto APIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: bizdev@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CryptoApis);
  }
}(this, function(expect, CryptoApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CryptoApis.UnifiedEndpointsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UnifiedEndpointsApi', function() {
    describe('getAddressDetails', function() {
      it('should call getAddressDetails successfully', function(done) {
        //uncomment below and update the code to test getAddressDetails
        //instance.getAddressDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBlockDetailsByBlockHash', function() {
      it('should call getBlockDetailsByBlockHash successfully', function(done) {
        //uncomment below and update the code to test getBlockDetailsByBlockHash
        //instance.getBlockDetailsByBlockHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBlockDetailsByBlockHeight', function() {
      it('should call getBlockDetailsByBlockHeight successfully', function(done) {
        //uncomment below and update the code to test getBlockDetailsByBlockHeight
        //instance.getBlockDetailsByBlockHeight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeeRecommendations', function() {
      it('should call getFeeRecommendations successfully', function(done) {
        //uncomment below and update the code to test getFeeRecommendations
        //instance.getFeeRecommendations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLatestMinedBlock', function() {
      it('should call getLatestMinedBlock successfully', function(done) {
        //uncomment below and update the code to test getLatestMinedBlock
        //instance.getLatestMinedBlock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransactionDetailsByTransactionID', function() {
      it('should call getTransactionDetailsByTransactionID successfully', function(done) {
        //uncomment below and update the code to test getTransactionDetailsByTransactionID
        //instance.getTransactionDetailsByTransactionID(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTransactionsByAddress', function() {
      it('should call listTransactionsByAddress successfully', function(done) {
        //uncomment below and update the code to test listTransactionsByAddress
        //instance.listTransactionsByAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTransactionsByBlockHash', function() {
      it('should call listTransactionsByBlockHash successfully', function(done) {
        //uncomment below and update the code to test listTransactionsByBlockHash
        //instance.listTransactionsByBlockHash(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTransactionsByBlockHeight', function() {
      it('should call listTransactionsByBlockHeight successfully', function(done) {
        //uncomment below and update the code to test listTransactionsByBlockHeight
        //instance.listTransactionsByBlockHeight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
