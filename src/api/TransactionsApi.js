/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConvertBitcoinCashAddress402Response from '../model/ConvertBitcoinCashAddress402Response';
import ConvertBitcoinCashAddress415Response from '../model/ConvertBitcoinCashAddress415Response';
import ConvertBitcoinCashAddress422Response from '../model/ConvertBitcoinCashAddress422Response';
import ConvertBitcoinCashAddress429Response from '../model/ConvertBitcoinCashAddress429Response';
import ConvertBitcoinCashAddress500Response from '../model/ConvertBitcoinCashAddress500Response';
import CreateCoinsTransactionFromAddressForWholeAmount400Response from '../model/CreateCoinsTransactionFromAddressForWholeAmount400Response';
import CreateCoinsTransactionFromAddressForWholeAmount401Response from '../model/CreateCoinsTransactionFromAddressForWholeAmount401Response';
import CreateCoinsTransactionFromAddressForWholeAmount403Response from '../model/CreateCoinsTransactionFromAddressForWholeAmount403Response';
import CreateCoinsTransactionFromAddressForWholeAmount409Response from '../model/CreateCoinsTransactionFromAddressForWholeAmount409Response';
import CreateCoinsTransactionFromAddressForWholeAmountR from '../model/CreateCoinsTransactionFromAddressForWholeAmountR';
import CreateCoinsTransactionFromAddressForWholeAmountRB from '../model/CreateCoinsTransactionFromAddressForWholeAmountRB';
import CreateCoinsTransactionRequestFromAddress400Response from '../model/CreateCoinsTransactionRequestFromAddress400Response';
import CreateCoinsTransactionRequestFromAddress401Response from '../model/CreateCoinsTransactionRequestFromAddress401Response';
import CreateCoinsTransactionRequestFromAddress403Response from '../model/CreateCoinsTransactionRequestFromAddress403Response';
import CreateCoinsTransactionRequestFromAddress409Response from '../model/CreateCoinsTransactionRequestFromAddress409Response';
import CreateCoinsTransactionRequestFromAddressR from '../model/CreateCoinsTransactionRequestFromAddressR';
import CreateCoinsTransactionRequestFromAddressRB from '../model/CreateCoinsTransactionRequestFromAddressRB';
import CreateCoinsTransactionRequestFromWallet400Response from '../model/CreateCoinsTransactionRequestFromWallet400Response';
import CreateCoinsTransactionRequestFromWallet401Response from '../model/CreateCoinsTransactionRequestFromWallet401Response';
import CreateCoinsTransactionRequestFromWallet403Response from '../model/CreateCoinsTransactionRequestFromWallet403Response';
import CreateCoinsTransactionRequestFromWallet409Response from '../model/CreateCoinsTransactionRequestFromWallet409Response';
import CreateCoinsTransactionRequestFromWalletR from '../model/CreateCoinsTransactionRequestFromWalletR';
import CreateCoinsTransactionRequestFromWalletRB from '../model/CreateCoinsTransactionRequestFromWalletRB';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority400Response from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority400Response';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority401Response from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority401Response';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority403Response from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority403Response';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority409Response from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriority409Response';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR';
import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB from '../model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB';
import CreateFungibleTokensTransactionRequestFromAddress400Response from '../model/CreateFungibleTokensTransactionRequestFromAddress400Response';
import CreateFungibleTokensTransactionRequestFromAddress401Response from '../model/CreateFungibleTokensTransactionRequestFromAddress401Response';
import CreateFungibleTokensTransactionRequestFromAddress403Response from '../model/CreateFungibleTokensTransactionRequestFromAddress403Response';
import CreateFungibleTokensTransactionRequestFromAddress409Response from '../model/CreateFungibleTokensTransactionRequestFromAddress409Response';
import CreateFungibleTokensTransactionRequestFromAddressR from '../model/CreateFungibleTokensTransactionRequestFromAddressR';
import CreateFungibleTokensTransactionRequestFromAddressRB from '../model/CreateFungibleTokensTransactionRequestFromAddressRB';
import CreateSingleTransactionRequestFromAddressWithoutFeePriority400Response from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriority400Response';
import CreateSingleTransactionRequestFromAddressWithoutFeePriority401Response from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriority401Response';
import CreateSingleTransactionRequestFromAddressWithoutFeePriority403Response from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriority403Response';
import CreateSingleTransactionRequestFromAddressWithoutFeePriority409Response from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriority409Response';
import CreateSingleTransactionRequestFromAddressWithoutFeePriorityR from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityR';
import CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB from '../model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.12.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Coins Transaction From Address For Whole Amount
     * Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
     * @param {String} address Defines the source address.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionFromAddressForWholeAmountRB} opts.createCoinsTransactionFromAddressForWholeAmountRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionFromAddressForWholeAmountR} and HTTP response
     */
    createCoinsTransactionFromAddressForWholeAmountWithHttpInfo(address, blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionFromAddressForWholeAmountRB'];
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionFromAddressForWholeAmount");
      }

      let pathParams = {
        'address': address,
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionFromAddressForWholeAmountR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/all-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction From Address For Whole Amount
     * Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
     * @param {String} address Defines the source address.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionFromAddressForWholeAmountRB} opts.createCoinsTransactionFromAddressForWholeAmountRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionFromAddressForWholeAmountR}
     */
    createCoinsTransactionFromAddressForWholeAmount(address, blockchain, network, walletId, opts) {
      return this.createCoinsTransactionFromAddressForWholeAmountWithHttpInfo(address, blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Coins Transaction Request from Address
     * Through this endpoint users can create a new single transaction request from one address to another.
     * @param {String} address Defines the specific source address for the transaction. For XRP we also support the X-address format.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromAddressRB} opts.createCoinsTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionRequestFromAddressR} and HTTP response
     */
    createCoinsTransactionRequestFromAddressWithHttpInfo(address, blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionRequestFromAddressRB'];
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionRequestFromAddress");
      }

      let pathParams = {
        'address': address,
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionRequestFromAddressR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction Request from Address
     * Through this endpoint users can create a new single transaction request from one address to another.
     * @param {String} address Defines the specific source address for the transaction. For XRP we also support the X-address format.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromAddressRB} opts.createCoinsTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionRequestFromAddressR}
     */
    createCoinsTransactionRequestFromAddress(address, blockchain, network, walletId, opts) {
      return this.createCoinsTransactionRequestFromAddressWithHttpInfo(address, blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Coins Transaction Request from Wallet
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromWalletRB} opts.createCoinsTransactionRequestFromWalletRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionRequestFromWalletR} and HTTP response
     */
    createCoinsTransactionRequestFromWalletWithHttpInfo(blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionRequestFromWalletRB'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionRequestFromWallet");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionRequestFromWallet");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionRequestFromWallet");
      }

      let pathParams = {
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionRequestFromWalletR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction Request from Wallet
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromWalletRB} opts.createCoinsTransactionRequestFromWalletRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionRequestFromWalletR}
     */
    createCoinsTransactionRequestFromWallet(blockchain, network, walletId, opts) {
      return this.createCoinsTransactionRequestFromWalletWithHttpInfo(blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Fungible Token Transaction Request From Address Without Fee Priority
     * Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB} opts.createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR} and HTTP response
     */
    createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(blockchain, network, senderAddress, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'senderAddress' is set
      if (senderAddress === undefined || senderAddress === null) {
        throw new Error("Missing the required parameter 'senderAddress' when calling createFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createFungibleTokenTransactionRequestFromAddressWithoutFeePriority");
      }

      let pathParams = {
        'blockchain': blockchain,
        'network': network,
        'senderAddress': senderAddress,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/feeless-token-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Fungible Token Transaction Request From Address Without Fee Priority
     * Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB} opts.createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR}
     */
    createFungibleTokenTransactionRequestFromAddressWithoutFeePriority(blockchain, network, senderAddress, walletId, opts) {
      return this.createFungibleTokenTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(blockchain, network, senderAddress, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Fungible Tokens Transaction Request from Address
     * Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateFungibleTokensTransactionRequestFromAddressRB} opts.createFungibleTokensTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateFungibleTokensTransactionRequestFromAddressR} and HTTP response
     */
    createFungibleTokensTransactionRequestFromAddressWithHttpInfo(blockchain, network, senderAddress, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createFungibleTokensTransactionRequestFromAddressRB'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createFungibleTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createFungibleTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'senderAddress' is set
      if (senderAddress === undefined || senderAddress === null) {
        throw new Error("Missing the required parameter 'senderAddress' when calling createFungibleTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createFungibleTokensTransactionRequestFromAddress");
      }

      let pathParams = {
        'blockchain': blockchain,
        'network': network,
        'senderAddress': senderAddress,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFungibleTokensTransactionRequestFromAddressR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/token-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Fungible Tokens Transaction Request from Address
     * Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateFungibleTokensTransactionRequestFromAddressRB} opts.createFungibleTokensTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateFungibleTokensTransactionRequestFromAddressR}
     */
    createFungibleTokensTransactionRequestFromAddress(blockchain, network, senderAddress, walletId, opts) {
      return this.createFungibleTokensTransactionRequestFromAddressWithHttpInfo(blockchain, network, senderAddress, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Single Transaction Request From Address Without Fee Priority
     * Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \"Create Coins Transaction Request from Address\"  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
     * @param {String} address Defines the specific source address for the transaction.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB} opts.createSingleTransactionRequestFromAddressWithoutFeePriorityRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityR} and HTTP response
     */
    createSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(address, blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createSingleTransactionRequestFromAddressWithoutFeePriorityRB'];
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createSingleTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createSingleTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createSingleTransactionRequestFromAddressWithoutFeePriority");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createSingleTransactionRequestFromAddressWithoutFeePriority");
      }

      let pathParams = {
        'address': address,
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSingleTransactionRequestFromAddressWithoutFeePriorityR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/feeless-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Single Transaction Request From Address Without Fee Priority
     * Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \"Create Coins Transaction Request from Address\"  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.
     * @param {String} address Defines the specific source address for the transaction.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB} opts.createSingleTransactionRequestFromAddressWithoutFeePriorityRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSingleTransactionRequestFromAddressWithoutFeePriorityR}
     */
    createSingleTransactionRequestFromAddressWithoutFeePriority(address, blockchain, network, walletId, opts) {
      return this.createSingleTransactionRequestFromAddressWithoutFeePriorityWithHttpInfo(address, blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
