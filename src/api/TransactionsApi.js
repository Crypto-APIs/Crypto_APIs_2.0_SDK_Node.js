/**
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCoinsTransactionFromAddressForWholeAmountR from '../model/CreateCoinsTransactionFromAddressForWholeAmountR';
import CreateCoinsTransactionFromAddressForWholeAmountRB from '../model/CreateCoinsTransactionFromAddressForWholeAmountRB';
import CreateCoinsTransactionRequestFromAddressR from '../model/CreateCoinsTransactionRequestFromAddressR';
import CreateCoinsTransactionRequestFromAddressRB from '../model/CreateCoinsTransactionRequestFromAddressRB';
import CreateCoinsTransactionRequestFromWalletR from '../model/CreateCoinsTransactionRequestFromWalletR';
import CreateCoinsTransactionRequestFromWalletRB from '../model/CreateCoinsTransactionRequestFromWalletRB';
import CreateTokensTransactionRequestFromAddressR from '../model/CreateTokensTransactionRequestFromAddressR';
import CreateTokensTransactionRequestFromAddressRB from '../model/CreateTokensTransactionRequestFromAddressRB';
import FeatureMainnetsNotAllowedForPlan from '../model/FeatureMainnetsNotAllowedForPlan';
import InsufficientCredits from '../model/InsufficientCredits';
import InvalidApiKey from '../model/InvalidApiKey';
import InvalidPagination from '../model/InvalidPagination';
import InvalidRequestBodyStructure from '../model/InvalidRequestBodyStructure';
import RequestLimitReached from '../model/RequestLimitReached';
import UnexpectedServerError from '../model/UnexpectedServerError';
import UnsupportedMediaType from '../model/UnsupportedMediaType';
import WalletAsAServiceAddressBalanceNotEnough from '../model/WalletAsAServiceAddressBalanceNotEnough';
import WalletAsAServiceNoDepositAddressesFound from '../model/WalletAsAServiceNoDepositAddressesFound';
import WalletAsAServiceTokenNotSupported from '../model/WalletAsAServiceTokenNotSupported';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.3.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Coins Transaction From Address For Whole Amount
     * Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
     * @param {String} address Defines the source address.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionFromAddressForWholeAmountRB} opts.createCoinsTransactionFromAddressForWholeAmountRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionFromAddressForWholeAmountR} and HTTP response
     */
    createCoinsTransactionFromAddressForWholeAmountWithHttpInfo(address, blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionFromAddressForWholeAmountRB'];
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionFromAddressForWholeAmount");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionFromAddressForWholeAmount");
      }

      let pathParams = {
        'address': address,
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionFromAddressForWholeAmountR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/all-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction From Address For Whole Amount
     * Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.
     * @param {String} address Defines the source address.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionFromAddressForWholeAmountRB} opts.createCoinsTransactionFromAddressForWholeAmountRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionFromAddressForWholeAmountR}
     */
    createCoinsTransactionFromAddressForWholeAmount(address, blockchain, network, walletId, opts) {
      return this.createCoinsTransactionFromAddressForWholeAmountWithHttpInfo(address, blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Coins Transaction Request from Address
     * Through this endpoint users can create a new single transaction request from one address to another.
     * @param {String} address Defines the specific source address for the transaction.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromAddressRB} opts.createCoinsTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionRequestFromAddressR} and HTTP response
     */
    createCoinsTransactionRequestFromAddressWithHttpInfo(address, blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionRequestFromAddressRB'];
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionRequestFromAddress");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionRequestFromAddress");
      }

      let pathParams = {
        'address': address,
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionRequestFromAddressR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction Request from Address
     * Through this endpoint users can create a new single transaction request from one address to another.
     * @param {String} address Defines the specific source address for the transaction.
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromAddressRB} opts.createCoinsTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionRequestFromAddressR}
     */
    createCoinsTransactionRequestFromAddress(address, blockchain, network, walletId, opts) {
      return this.createCoinsTransactionRequestFromAddressWithHttpInfo(address, blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Coins Transaction Request from Wallet
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromWalletRB} opts.createCoinsTransactionRequestFromWalletRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCoinsTransactionRequestFromWalletR} and HTTP response
     */
    createCoinsTransactionRequestFromWalletWithHttpInfo(blockchain, network, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createCoinsTransactionRequestFromWalletRB'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createCoinsTransactionRequestFromWallet");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createCoinsTransactionRequestFromWallet");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createCoinsTransactionRequestFromWallet");
      }

      let pathParams = {
        'blockchain': blockchain,
        'network': network,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCoinsTransactionRequestFromWalletR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Coins Transaction Request from Wallet
     * Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} walletId Represents the sender's specific and unique Wallet ID of the sender.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateCoinsTransactionRequestFromWalletRB} opts.createCoinsTransactionRequestFromWalletRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCoinsTransactionRequestFromWalletR}
     */
    createCoinsTransactionRequestFromWallet(blockchain, network, walletId, opts) {
      return this.createCoinsTransactionRequestFromWalletWithHttpInfo(blockchain, network, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Tokens Transaction Request from Address
     * Through this endpoint users can make a single token transaction.    {warning}This applies only to **fungible** tokens, **not** NFTs (non-fungible tokens).{/warning}    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateTokensTransactionRequestFromAddressRB} opts.createTokensTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTokensTransactionRequestFromAddressR} and HTTP response
     */
    createTokensTransactionRequestFromAddressWithHttpInfo(blockchain, network, senderAddress, walletId, opts) {
      opts = opts || {};
      let postBody = opts['createTokensTransactionRequestFromAddressRB'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling createTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'network' is set
      if (network === undefined || network === null) {
        throw new Error("Missing the required parameter 'network' when calling createTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'senderAddress' is set
      if (senderAddress === undefined || senderAddress === null) {
        throw new Error("Missing the required parameter 'senderAddress' when calling createTokensTransactionRequestFromAddress");
      }
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling createTokensTransactionRequestFromAddress");
      }

      let pathParams = {
        'blockchain': blockchain,
        'network': network,
        'senderAddress': senderAddress,
        'walletId': walletId
      };
      let queryParams = {
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTokensTransactionRequestFromAddressR;
      return this.apiClient.callApi(
        '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/token-transaction-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Tokens Transaction Request from Address
     * Through this endpoint users can make a single token transaction.    {warning}This applies only to **fungible** tokens, **not** NFTs (non-fungible tokens).{/warning}    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}
     * @param {module:model/String} blockchain Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param {module:model/String} network Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param {String} senderAddress Defines the specific source address for the transaction.
     * @param {String} walletId Defines the unique ID of the Wallet.
     * @param {Object} opts Optional parameters
     * @param {String} opts.context In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
     * @param {module:model/CreateTokensTransactionRequestFromAddressRB} opts.createTokensTransactionRequestFromAddressRB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTokensTransactionRequestFromAddressR}
     */
    createTokensTransactionRequestFromAddress(blockchain, network, senderAddress, walletId, opts) {
      return this.createTokensTransactionRequestFromAddressWithHttpInfo(blockchain, network, senderAddress, walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
