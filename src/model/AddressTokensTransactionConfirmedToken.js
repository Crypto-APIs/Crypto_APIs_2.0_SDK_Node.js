/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressTokensTransactionConfirmedBep20 from './AddressTokensTransactionConfirmedBep20';
import AddressTokensTransactionConfirmedErc20 from './AddressTokensTransactionConfirmedErc20';
import AddressTokensTransactionConfirmedErc721 from './AddressTokensTransactionConfirmedErc721';
import AddressTokensTransactionConfirmedOmni from './AddressTokensTransactionConfirmedOmni';

/**
 * The AddressTokensTransactionConfirmedToken model module.
 * @module model/AddressTokensTransactionConfirmedToken
 * @version 1.11.0
 */
class AddressTokensTransactionConfirmedToken {
    /**
     * Constructs a new <code>AddressTokensTransactionConfirmedToken</code>.
     * @alias module:model/AddressTokensTransactionConfirmedToken
     * @param {(module:model/AddressTokensTransactionConfirmedBep20|module:model/AddressTokensTransactionConfirmedErc20|module:model/AddressTokensTransactionConfirmedErc721|module:model/AddressTokensTransactionConfirmedOmni)} instance The actual instance to initialize AddressTokensTransactionConfirmedToken.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AddressTokensTransactionConfirmedErc20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedErc20.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedErc20 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedErc20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedErc20
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedErc20: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedErc721") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedErc721.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedErc721 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedErc721.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedErc721
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedErc721: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedOmni") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedOmni.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedOmni from JS object
                this.actualInstance = AddressTokensTransactionConfirmedOmni.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedOmni
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedOmni: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedBep20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedBep20.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedBep20 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedBep20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedBep20
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedBep20: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddressTokensTransactionConfirmedToken` with oneOf schemas AddressTokensTransactionConfirmedBep20, AddressTokensTransactionConfirmedErc20, AddressTokensTransactionConfirmedErc721, AddressTokensTransactionConfirmedOmni. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddressTokensTransactionConfirmedToken` with oneOf schemas AddressTokensTransactionConfirmedBep20, AddressTokensTransactionConfirmedErc20, AddressTokensTransactionConfirmedErc721, AddressTokensTransactionConfirmedOmni. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddressTokensTransactionConfirmedToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressTokensTransactionConfirmedToken} obj Optional instance to populate.
     * @return {module:model/AddressTokensTransactionConfirmedToken} The populated <code>AddressTokensTransactionConfirmedToken</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddressTokensTransactionConfirmedToken(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddressTokensTransactionConfirmedBep20</code>, <code>AddressTokensTransactionConfirmedErc20</code>, <code>AddressTokensTransactionConfirmedErc721</code>, <code>AddressTokensTransactionConfirmedOmni</code>.
     * @return {(module:model/AddressTokensTransactionConfirmedBep20|module:model/AddressTokensTransactionConfirmedErc20|module:model/AddressTokensTransactionConfirmedErc721|module:model/AddressTokensTransactionConfirmedOmni)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddressTokensTransactionConfirmedBep20</code>, <code>AddressTokensTransactionConfirmedErc20</code>, <code>AddressTokensTransactionConfirmedErc721</code>, <code>AddressTokensTransactionConfirmedOmni</code>.
     * @param {(module:model/AddressTokensTransactionConfirmedBep20|module:model/AddressTokensTransactionConfirmedErc20|module:model/AddressTokensTransactionConfirmedErc721|module:model/AddressTokensTransactionConfirmedOmni)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddressTokensTransactionConfirmedToken.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddressTokensTransactionConfirmedToken from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddressTokensTransactionConfirmedToken} An instance of AddressTokensTransactionConfirmedToken.
     */
    static fromJSON = function(json_string){
        return AddressTokensTransactionConfirmedToken.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Specifies the name of the token.
 * @member {String} name
 */
AddressTokensTransactionConfirmedToken.prototype['name'] = undefined;

/**
 * Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
 * @member {String} symbol
 */
AddressTokensTransactionConfirmedToken.prototype['symbol'] = undefined;

/**
 * Defines how many decimals can be used to break the token.
 * @member {String} decimals
 */
AddressTokensTransactionConfirmedToken.prototype['decimals'] = undefined;

/**
 * Defines the amount of tokens sent with the confirmed transaction.
 * @member {String} amount
 */
AddressTokensTransactionConfirmedToken.prototype['amount'] = undefined;

/**
 * Defines the address of the contract.
 * @member {String} contractAddress
 */
AddressTokensTransactionConfirmedToken.prototype['contractAddress'] = undefined;

/**
 * Specifies the ID of the token.
 * @member {String} tokenId
 */
AddressTokensTransactionConfirmedToken.prototype['tokenId'] = undefined;

/**
 * Defines the ID of the property for Omni Layer.
 * @member {String} propertyId
 */
AddressTokensTransactionConfirmedToken.prototype['propertyId'] = undefined;

/**
 * Defines the type of the transaction.
 * @member {String} transactionType
 */
AddressTokensTransactionConfirmedToken.prototype['transactionType'] = undefined;

/**
 * The transaction ID used to create the token.
 * @member {String} createdByTransactionId
 */
AddressTokensTransactionConfirmedToken.prototype['createdByTransactionId'] = undefined;


AddressTokensTransactionConfirmedToken.OneOf = ["AddressTokensTransactionConfirmedBep20", "AddressTokensTransactionConfirmedErc20", "AddressTokensTransactionConfirmedErc721", "AddressTokensTransactionConfirmedOmni"];

export default AddressTokensTransactionConfirmedToken;

