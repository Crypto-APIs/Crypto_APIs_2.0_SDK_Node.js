/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner';
import GetTransactionDetailsByTransactionIDRIBSZVoutInner from './GetTransactionDetailsByTransactionIDRIBSZVoutInner';
import ListConfirmedTransactionsByAddressRIBSB from './ListConfirmedTransactionsByAddressRIBSB';
import ListConfirmedTransactionsByAddressRIBSBC from './ListConfirmedTransactionsByAddressRIBSBC';
import ListConfirmedTransactionsByAddressRIBSBSC from './ListConfirmedTransactionsByAddressRIBSBSC';
import ListConfirmedTransactionsByAddressRIBSD from './ListConfirmedTransactionsByAddressRIBSD';
import ListConfirmedTransactionsByAddressRIBSD2 from './ListConfirmedTransactionsByAddressRIBSD2';
import ListConfirmedTransactionsByAddressRIBSE from './ListConfirmedTransactionsByAddressRIBSE';
import ListConfirmedTransactionsByAddressRIBSEC from './ListConfirmedTransactionsByAddressRIBSEC';
import ListConfirmedTransactionsByAddressRIBSL from './ListConfirmedTransactionsByAddressRIBSL';
import ListConfirmedTransactionsByAddressRIBSP from './ListConfirmedTransactionsByAddressRIBSP';
import ListConfirmedTransactionsByAddressRIBSPGasPrice from './ListConfirmedTransactionsByAddressRIBSPGasPrice';
import ListConfirmedTransactionsByAddressRIBST from './ListConfirmedTransactionsByAddressRIBST';
import ListConfirmedTransactionsByAddressRIBSZ from './ListConfirmedTransactionsByAddressRIBSZ';
import ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner from './ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner';
import ListConfirmedTransactionsByAddressRIBSZVinInner from './ListConfirmedTransactionsByAddressRIBSZVinInner';

/**
 * The ListConfirmedTransactionsByAddressRIBS model module.
 * @module model/ListConfirmedTransactionsByAddressRIBS
 * @version 1.11.0
 */
class ListConfirmedTransactionsByAddressRIBS {
    /**
     * Constructs a new <code>ListConfirmedTransactionsByAddressRIBS</code>.
     * @alias module:model/ListConfirmedTransactionsByAddressRIBS
     * @param {(module:model/ListConfirmedTransactionsByAddressRIBSB|module:model/ListConfirmedTransactionsByAddressRIBSBC|module:model/ListConfirmedTransactionsByAddressRIBSBSC|module:model/ListConfirmedTransactionsByAddressRIBSD|module:model/ListConfirmedTransactionsByAddressRIBSD2|module:model/ListConfirmedTransactionsByAddressRIBSE|module:model/ListConfirmedTransactionsByAddressRIBSEC|module:model/ListConfirmedTransactionsByAddressRIBSL|module:model/ListConfirmedTransactionsByAddressRIBSP|module:model/ListConfirmedTransactionsByAddressRIBST|module:model/ListConfirmedTransactionsByAddressRIBSZ)} instance The actual instance to initialize ListConfirmedTransactionsByAddressRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSB") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSB.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSB from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSB.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSB
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSB: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSBC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSBC.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSBC from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSBC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSBC
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSBC: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSL.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSL from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSL
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSL: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSD") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSD.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSD from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSD.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSD
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSD: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSD2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSD2.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSD2 from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSD2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSD2
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSD2: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSEC.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSEC from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSEC
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSEC: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSE.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSE from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSE
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSE: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSBSC from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSBSC
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSBSC: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSZ") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSZ.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSZ from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSZ.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSZ
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSZ: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBST") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBST.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBST from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBST.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBST
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBST: " + err)
        }

        try {
            if (typeof instance === "ListConfirmedTransactionsByAddressRIBSP") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListConfirmedTransactionsByAddressRIBSP.validateJSON(instance); // throw an exception if no match
                // create ListConfirmedTransactionsByAddressRIBSP from JS object
                this.actualInstance = ListConfirmedTransactionsByAddressRIBSP.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListConfirmedTransactionsByAddressRIBSP
            errorMessages.push("Failed to construct ListConfirmedTransactionsByAddressRIBSP: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ListConfirmedTransactionsByAddressRIBS` with oneOf schemas ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSP, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBSZ. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ListConfirmedTransactionsByAddressRIBS` with oneOf schemas ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBSP, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBSZ. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ListConfirmedTransactionsByAddressRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListConfirmedTransactionsByAddressRIBS} obj Optional instance to populate.
     * @return {module:model/ListConfirmedTransactionsByAddressRIBS} The populated <code>ListConfirmedTransactionsByAddressRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ListConfirmedTransactionsByAddressRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>ListConfirmedTransactionsByAddressRIBSB</code>, <code>ListConfirmedTransactionsByAddressRIBSBC</code>, <code>ListConfirmedTransactionsByAddressRIBSBSC</code>, <code>ListConfirmedTransactionsByAddressRIBSD</code>, <code>ListConfirmedTransactionsByAddressRIBSD2</code>, <code>ListConfirmedTransactionsByAddressRIBSE</code>, <code>ListConfirmedTransactionsByAddressRIBSEC</code>, <code>ListConfirmedTransactionsByAddressRIBSL</code>, <code>ListConfirmedTransactionsByAddressRIBSP</code>, <code>ListConfirmedTransactionsByAddressRIBST</code>, <code>ListConfirmedTransactionsByAddressRIBSZ</code>.
     * @return {(module:model/ListConfirmedTransactionsByAddressRIBSB|module:model/ListConfirmedTransactionsByAddressRIBSBC|module:model/ListConfirmedTransactionsByAddressRIBSBSC|module:model/ListConfirmedTransactionsByAddressRIBSD|module:model/ListConfirmedTransactionsByAddressRIBSD2|module:model/ListConfirmedTransactionsByAddressRIBSE|module:model/ListConfirmedTransactionsByAddressRIBSEC|module:model/ListConfirmedTransactionsByAddressRIBSL|module:model/ListConfirmedTransactionsByAddressRIBSP|module:model/ListConfirmedTransactionsByAddressRIBST|module:model/ListConfirmedTransactionsByAddressRIBSZ)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ListConfirmedTransactionsByAddressRIBSB</code>, <code>ListConfirmedTransactionsByAddressRIBSBC</code>, <code>ListConfirmedTransactionsByAddressRIBSBSC</code>, <code>ListConfirmedTransactionsByAddressRIBSD</code>, <code>ListConfirmedTransactionsByAddressRIBSD2</code>, <code>ListConfirmedTransactionsByAddressRIBSE</code>, <code>ListConfirmedTransactionsByAddressRIBSEC</code>, <code>ListConfirmedTransactionsByAddressRIBSL</code>, <code>ListConfirmedTransactionsByAddressRIBSP</code>, <code>ListConfirmedTransactionsByAddressRIBST</code>, <code>ListConfirmedTransactionsByAddressRIBSZ</code>.
     * @param {(module:model/ListConfirmedTransactionsByAddressRIBSB|module:model/ListConfirmedTransactionsByAddressRIBSBC|module:model/ListConfirmedTransactionsByAddressRIBSBSC|module:model/ListConfirmedTransactionsByAddressRIBSD|module:model/ListConfirmedTransactionsByAddressRIBSD2|module:model/ListConfirmedTransactionsByAddressRIBSE|module:model/ListConfirmedTransactionsByAddressRIBSEC|module:model/ListConfirmedTransactionsByAddressRIBSL|module:model/ListConfirmedTransactionsByAddressRIBSP|module:model/ListConfirmedTransactionsByAddressRIBST|module:model/ListConfirmedTransactionsByAddressRIBSZ)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ListConfirmedTransactionsByAddressRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ListConfirmedTransactionsByAddressRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ListConfirmedTransactionsByAddressRIBS} An instance of ListConfirmedTransactionsByAddressRIBS.
     */
    static fromJSON = function(json_string){
        return ListConfirmedTransactionsByAddressRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid.
 * @member {Number} locktime
 */
ListConfirmedTransactionsByAddressRIBS.prototype['locktime'] = undefined;

/**
 * Represents the total size of this transaction.
 * @member {Number} size
 */
ListConfirmedTransactionsByAddressRIBS.prototype['size'] = undefined;

/**
 * Represents the virtual size of this transaction.
 * @member {Number} vSize
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vSize'] = undefined;

/**
 * Defines the version of the transaction.
 * @member {Number} version
 */
ListConfirmedTransactionsByAddressRIBS.prototype['version'] = undefined;

/**
 * Object Array representation of transaction inputs
 * @member {Array.<module:model/ListConfirmedTransactionsByAddressRIBSZVinInner>} vin
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vin'] = undefined;

/**
 * Object Array representation of transaction outputs
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVoutInner>} vout
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vout'] = undefined;

/**
 * Represents the specific transaction contract.
 * @member {String} contract
 */
ListConfirmedTransactionsByAddressRIBS.prototype['contract'] = undefined;

/**
 * Represents the amount of gas used by this specific transaction alone.
 * @member {String} gasLimit
 */
ListConfirmedTransactionsByAddressRIBS.prototype['gasLimit'] = undefined;

/**
 * @member {module:model/ListConfirmedTransactionsByAddressRIBSPGasPrice} gasPrice
 */
ListConfirmedTransactionsByAddressRIBS.prototype['gasPrice'] = undefined;

/**
 * Represents the exact unit of gas that was used for the transaction.
 * @member {String} gasUsed
 */
ListConfirmedTransactionsByAddressRIBS.prototype['gasUsed'] = undefined;

/**
 * Represents additional information that is required for the transaction.
 * @member {String} inputData
 */
ListConfirmedTransactionsByAddressRIBS.prototype['inputData'] = undefined;

/**
 * Rrepresentation of the internal transactions count
 * @member {Number} internalTransactionsCount
 */
ListConfirmedTransactionsByAddressRIBS.prototype['internalTransactionsCount'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {Number} nonce
 */
ListConfirmedTransactionsByAddressRIBS.prototype['nonce'] = undefined;

/**
 * Representation of the token transfers count
 * @member {Number} tokenTransfersCount
 */
ListConfirmedTransactionsByAddressRIBS.prototype['tokenTransfersCount'] = undefined;

/**
 * Representation of the transaction status
 * @member {String} transactionStatus
 */
ListConfirmedTransactionsByAddressRIBS.prototype['transactionStatus'] = undefined;

/**
 * It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.
 * @member {String} bindingSig
 */
ListConfirmedTransactionsByAddressRIBS.prototype['bindingSig'] = undefined;

/**
 * Represents a block height after which the transaction will expire.
 * @member {Number} expiryHeight
 */
ListConfirmedTransactionsByAddressRIBS.prototype['expiryHeight'] = undefined;

/**
 * Represents an encoding of a JoinSplitSig public validating key.
 * @member {String} joinSplitPubKey
 */
ListConfirmedTransactionsByAddressRIBS.prototype['joinSplitPubKey'] = undefined;

/**
 * Is used to sign transactions that contain at least one JoinSplit description.
 * @member {String} joinSplitSig
 */
ListConfirmedTransactionsByAddressRIBS.prototype['joinSplitSig'] = undefined;

/**
 * \"Overwinter\" is the network upgrade for the Zcash blockchain.
 * @member {Boolean} overwintered
 */
ListConfirmedTransactionsByAddressRIBS.prototype['overwintered'] = undefined;

/**
 * Represents a sequence of JoinSplit descriptions using BCTV14 proofs.
 * @member {Array.<module:model/ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner>} vJoinSplit
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vJoinSplit'] = undefined;

/**
 * Object Array representation of transaction output descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner>} vShieldedOutput
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vShieldedOutput'] = undefined;

/**
 * Object Array representation of transaction spend descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner>} vShieldedSpend
 */
ListConfirmedTransactionsByAddressRIBS.prototype['vShieldedSpend'] = undefined;

/**
 * Defines the transaction value balance.
 * @member {String} valueBalance
 */
ListConfirmedTransactionsByAddressRIBS.prototype['valueBalance'] = undefined;

/**
 * Represents the transaction version group ID.
 * @member {String} versionGroupId
 */
ListConfirmedTransactionsByAddressRIBS.prototype['versionGroupId'] = undefined;

/**
 * Numeric representation of the transaction used bandwidth
 * @member {String} bandwidthUsed
 */
ListConfirmedTransactionsByAddressRIBS.prototype['bandwidthUsed'] = undefined;

/**
 * String representation of the transaction used energy
 * @member {String} energyUsed
 */
ListConfirmedTransactionsByAddressRIBS.prototype['energyUsed'] = undefined;

/**
 * Defines if there are internal transactions (true) or not (false)
 * @member {Boolean} hasInternalTransactions
 */
ListConfirmedTransactionsByAddressRIBS.prototype['hasInternalTransactions'] = undefined;

/**
 * Defines if there are token transfers (true) or not (false)
 * @member {Boolean} hasTokenTransfers
 */
ListConfirmedTransactionsByAddressRIBS.prototype['hasTokenTransfers'] = undefined;


ListConfirmedTransactionsByAddressRIBS.OneOf = ["ListConfirmedTransactionsByAddressRIBSB", "ListConfirmedTransactionsByAddressRIBSBC", "ListConfirmedTransactionsByAddressRIBSBSC", "ListConfirmedTransactionsByAddressRIBSD", "ListConfirmedTransactionsByAddressRIBSD2", "ListConfirmedTransactionsByAddressRIBSE", "ListConfirmedTransactionsByAddressRIBSEC", "ListConfirmedTransactionsByAddressRIBSL", "ListConfirmedTransactionsByAddressRIBSP", "ListConfirmedTransactionsByAddressRIBST", "ListConfirmedTransactionsByAddressRIBSZ"];

export default ListConfirmedTransactionsByAddressRIBS;

