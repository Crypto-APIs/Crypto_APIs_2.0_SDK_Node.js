/**
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListUnspentTransactionOutputsByAddressRI model module.
 * @module model/ListUnspentTransactionOutputsByAddressRI
 * @version 1.6.0
 */
class ListUnspentTransactionOutputsByAddressRI {
    /**
     * Constructs a new <code>ListUnspentTransactionOutputsByAddressRI</code>.
     * @alias module:model/ListUnspentTransactionOutputsByAddressRI
     * @param address {String} Represents the address that has unspend funds per which the result is returned.
     * @param amount {String} Represents the sent/received amount.
     * @param index {Number} Represents the index position of the transaction in the block.
     * @param isConfirmed {Boolean} Represents the state of the transaction whether it is confirmed or not confirmed.
     * @param timestamp {Number} Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
     * @param transactionId {String} Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.
     */
    constructor(address, amount, index, isConfirmed, timestamp, transactionId) { 
        
        ListUnspentTransactionOutputsByAddressRI.initialize(this, address, amount, index, isConfirmed, timestamp, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, amount, index, isConfirmed, timestamp, transactionId) { 
        obj['address'] = address;
        obj['amount'] = amount;
        obj['index'] = index;
        obj['isConfirmed'] = isConfirmed;
        obj['timestamp'] = timestamp;
        obj['transactionId'] = transactionId;
    }

    /**
     * Constructs a <code>ListUnspentTransactionOutputsByAddressRI</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListUnspentTransactionOutputsByAddressRI} obj Optional instance to populate.
     * @return {module:model/ListUnspentTransactionOutputsByAddressRI} The populated <code>ListUnspentTransactionOutputsByAddressRI</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListUnspentTransactionOutputsByAddressRI();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('isConfirmed')) {
                obj['isConfirmed'] = ApiClient.convertToType(data['isConfirmed'], 'Boolean');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Represents the address that has unspend funds per which the result is returned.
 * @member {String} address
 */
ListUnspentTransactionOutputsByAddressRI.prototype['address'] = undefined;

/**
 * Represents the sent/received amount.
 * @member {String} amount
 */
ListUnspentTransactionOutputsByAddressRI.prototype['amount'] = undefined;

/**
 * Represents the index position of the transaction in the block.
 * @member {Number} index
 */
ListUnspentTransactionOutputsByAddressRI.prototype['index'] = undefined;

/**
 * Represents the state of the transaction whether it is confirmed or not confirmed.
 * @member {Boolean} isConfirmed
 */
ListUnspentTransactionOutputsByAddressRI.prototype['isConfirmed'] = undefined;

/**
 * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
 * @member {Number} timestamp
 */
ListUnspentTransactionOutputsByAddressRI.prototype['timestamp'] = undefined;

/**
 * Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.
 * @member {String} transactionId
 */
ListUnspentTransactionOutputsByAddressRI.prototype['transactionId'] = undefined;






export default ListUnspentTransactionOutputsByAddressRI;

