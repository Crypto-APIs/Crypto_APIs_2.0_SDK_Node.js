/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData';

/**
 * The PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST model module.
 * @module model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
 * @version 1.13.0
 */
class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST {
    /**
     * Constructs a new <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST</code>.
     * Tron
     * @alias module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
     * @param data {String} String representation of the data
     * @param derivationIndex {String} Representation of the derivation index of the xpub address
     * @param expiration {Number} Rrepresentation of the expiration value
     * @param rawDataHex {String} Representation of the raw data in hex format
     * @param recipient {String} Rrepresentation of the recipients' address
     * @param refBlockBytes {String} Representation of the block bytes
     * @param refBlockHash {String} Representation of the block hash refference
     * @param sender {String} Representation of the sender
     * @param timestamp {Number} Representation of the timestamp
     * @param transactionId {String} Represents the reference transaction identifier.
     * @param type {String} Representation of the transfer type.
     * @param typeUrl {String} Representation of the URL
     * @param unit {String} Represents the unit of the amount to be sent.
     * @param visible {Boolean} Representation of the address visibility
     */
    constructor(data, derivationIndex, expiration, rawDataHex, recipient, refBlockBytes, refBlockHash, sender, timestamp, transactionId, type, typeUrl, unit, visible) { 
        
        PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.initialize(this, data, derivationIndex, expiration, rawDataHex, recipient, refBlockBytes, refBlockHash, sender, timestamp, transactionId, type, typeUrl, unit, visible);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, derivationIndex, expiration, rawDataHex, recipient, refBlockBytes, refBlockHash, sender, timestamp, transactionId, type, typeUrl, unit, visible) { 
        obj['data'] = data;
        obj['derivationIndex'] = derivationIndex;
        obj['expiration'] = expiration;
        obj['rawDataHex'] = rawDataHex;
        obj['recipient'] = recipient;
        obj['refBlockBytes'] = refBlockBytes;
        obj['refBlockHash'] = refBlockHash;
        obj['sender'] = sender;
        obj['timestamp'] = timestamp;
        obj['transactionId'] = transactionId;
        obj['type'] = type;
        obj['typeUrl'] = typeUrl;
        obj['unit'] = unit;
        obj['visible'] = visible;
    }

    /**
     * Constructs a <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST} obj Optional instance to populate.
     * @return {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST} The populated <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('derivationIndex')) {
                obj['derivationIndex'] = ApiClient.convertToType(data['derivationIndex'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Number');
            }
            if (data.hasOwnProperty('rawData')) {
                obj['rawData'] = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData.constructFromObject(data['rawData']);
            }
            if (data.hasOwnProperty('rawDataHex')) {
                obj['rawDataHex'] = ApiClient.convertToType(data['rawDataHex'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = ApiClient.convertToType(data['recipient'], 'String');
            }
            if (data.hasOwnProperty('refBlockBytes')) {
                obj['refBlockBytes'] = ApiClient.convertToType(data['refBlockBytes'], 'String');
            }
            if (data.hasOwnProperty('refBlockHash')) {
                obj['refBlockHash'] = ApiClient.convertToType(data['refBlockHash'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeUrl')) {
                obj['typeUrl'] = ApiClient.convertToType(data['typeUrl'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * String representation of the data
 * @member {String} data
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['data'] = undefined;

/**
 * Representation of the derivation index of the xpub address
 * @member {String} derivationIndex
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['derivationIndex'] = undefined;

/**
 * Rrepresentation of the expiration value
 * @member {Number} expiration
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['expiration'] = undefined;

/**
 * @member {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData} rawData
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['rawData'] = undefined;

/**
 * Representation of the raw data in hex format
 * @member {String} rawDataHex
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['rawDataHex'] = undefined;

/**
 * Rrepresentation of the recipients' address
 * @member {String} recipient
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['recipient'] = undefined;

/**
 * Representation of the block bytes
 * @member {String} refBlockBytes
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['refBlockBytes'] = undefined;

/**
 * Representation of the block hash refference
 * @member {String} refBlockHash
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['refBlockHash'] = undefined;

/**
 * Representation of the sender
 * @member {String} sender
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['sender'] = undefined;

/**
 * Representation of the timestamp
 * @member {Number} timestamp
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['timestamp'] = undefined;

/**
 * Represents the reference transaction identifier.
 * @member {String} transactionId
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['transactionId'] = undefined;

/**
 * Representation of the transfer type.
 * @member {String} type
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['type'] = undefined;

/**
 * Representation of the URL
 * @member {String} typeUrl
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['typeUrl'] = undefined;

/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['unit'] = undefined;

/**
 * Representation of the address visibility
 * @member {Boolean} visible
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.prototype['visible'] = undefined;






export default PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST;

