/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListSyncedAddressesRISF model module.
 * @module model/ListSyncedAddressesRISF
 * @version 1.7.1
 */
class ListSyncedAddressesRISF {
    /**
     * Constructs a new <code>ListSyncedAddressesRISF</code>.
     * Fungible Token Asset Data
     * @alias module:model/ListSyncedAddressesRISF
     * @param amount {String} Defines the available fingible tokens amount in the specific address.
     * @param contractAddress {String} Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.
     * @param type {String} Defines the specific token type.
     */
    constructor(amount, contractAddress, type) { 
        
        ListSyncedAddressesRISF.initialize(this, amount, contractAddress, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, contractAddress, type) { 
        obj['amount'] = amount;
        obj['contractAddress'] = contractAddress;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ListSyncedAddressesRISF</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListSyncedAddressesRISF} obj Optional instance to populate.
     * @return {module:model/ListSyncedAddressesRISF} The populated <code>ListSyncedAddressesRISF</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListSyncedAddressesRISF();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('contractAddress')) {
                obj['contractAddress'] = ApiClient.convertToType(data['contractAddress'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Defines the available fingible tokens amount in the specific address.
 * @member {String} amount
 */
ListSyncedAddressesRISF.prototype['amount'] = undefined;

/**
 * Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.
 * @member {String} contractAddress
 */
ListSyncedAddressesRISF.prototype['contractAddress'] = undefined;

/**
 * Defines the specific token type.
 * @member {String} type
 */
ListSyncedAddressesRISF.prototype['type'] = undefined;






export default ListSyncedAddressesRISF;

