/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetTransactionDetailsByTransactionIDFromCallbackRIBSP model module.
 * @module model/GetTransactionDetailsByTransactionIDFromCallbackRIBSP
 * @version 1.8.0
 */
class GetTransactionDetailsByTransactionIDFromCallbackRIBSP {
    /**
     * Constructs a new <code>GetTransactionDetailsByTransactionIDFromCallbackRIBSP</code>.
     * Polygon
     * @alias module:model/GetTransactionDetailsByTransactionIDFromCallbackRIBSP
     * @param amount {String} Representation of the amount value.
     * @param contract {String} Represents the specific transaction contract.
     * @param gas {String} Represents the price offered to the miner to purchase this amount of gas.
     * @param gasPrice {String} Represents the price offered to the miner to purchase this amount of gas.
     * @param gasUsed {String} Represents the exact unit of gas that was used for the transaction.
     * @param input {String} Represents additional information that is required for the transaction.
     * @param nonce {Number} Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
     * @param recipients {String} Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
     * @param senders {String} Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
     * @param transactionStatus {String} Represents the status of this transaction.
     * @param txid {String} Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
     */
    constructor(amount, contract, gas, gasPrice, gasUsed, input, nonce, recipients, senders, transactionStatus, txid) { 
        
        GetTransactionDetailsByTransactionIDFromCallbackRIBSP.initialize(this, amount, contract, gas, gasPrice, gasUsed, input, nonce, recipients, senders, transactionStatus, txid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, contract, gas, gasPrice, gasUsed, input, nonce, recipients, senders, transactionStatus, txid) { 
        obj['amount'] = amount;
        obj['contract'] = contract;
        obj['gas'] = gas;
        obj['gasPrice'] = gasPrice;
        obj['gasUsed'] = gasUsed;
        obj['input'] = input;
        obj['nonce'] = nonce;
        obj['recipients'] = recipients;
        obj['senders'] = senders;
        obj['transactionStatus'] = transactionStatus;
        obj['txid'] = txid;
    }

    /**
     * Constructs a <code>GetTransactionDetailsByTransactionIDFromCallbackRIBSP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetTransactionDetailsByTransactionIDFromCallbackRIBSP} obj Optional instance to populate.
     * @return {module:model/GetTransactionDetailsByTransactionIDFromCallbackRIBSP} The populated <code>GetTransactionDetailsByTransactionIDFromCallbackRIBSP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTransactionDetailsByTransactionIDFromCallbackRIBSP();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('contract')) {
                obj['contract'] = ApiClient.convertToType(data['contract'], 'String');
            }
            if (data.hasOwnProperty('gas')) {
                obj['gas'] = ApiClient.convertToType(data['gas'], 'String');
            }
            if (data.hasOwnProperty('gasPrice')) {
                obj['gasPrice'] = ApiClient.convertToType(data['gasPrice'], 'String');
            }
            if (data.hasOwnProperty('gasUsed')) {
                obj['gasUsed'] = ApiClient.convertToType(data['gasUsed'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], 'String');
            }
            if (data.hasOwnProperty('senders')) {
                obj['senders'] = ApiClient.convertToType(data['senders'], 'String');
            }
            if (data.hasOwnProperty('transactionStatus')) {
                obj['transactionStatus'] = ApiClient.convertToType(data['transactionStatus'], 'String');
            }
            if (data.hasOwnProperty('txid')) {
                obj['txid'] = ApiClient.convertToType(data['txid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Representation of the amount value.
 * @member {String} amount
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['amount'] = undefined;

/**
 * Represents the specific transaction contract.
 * @member {String} contract
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['contract'] = undefined;

/**
 * Represents the price offered to the miner to purchase this amount of gas.
 * @member {String} gas
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['gas'] = undefined;

/**
 * Represents the price offered to the miner to purchase this amount of gas.
 * @member {String} gasPrice
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['gasPrice'] = undefined;

/**
 * Represents the exact unit of gas that was used for the transaction.
 * @member {String} gasUsed
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['gasUsed'] = undefined;

/**
 * Represents additional information that is required for the transaction.
 * @member {String} input
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['input'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {Number} nonce
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['nonce'] = undefined;

/**
 * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
 * @member {String} recipients
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['recipients'] = undefined;

/**
 * Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
 * @member {String} senders
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['senders'] = undefined;

/**
 * Represents the status of this transaction.
 * @member {String} transactionStatus
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['transactionStatus'] = undefined;

/**
 * Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
 * @member {String} txid
 */
GetTransactionDetailsByTransactionIDFromCallbackRIBSP.prototype['txid'] = undefined;






export default GetTransactionDetailsByTransactionIDFromCallbackRIBSP;

