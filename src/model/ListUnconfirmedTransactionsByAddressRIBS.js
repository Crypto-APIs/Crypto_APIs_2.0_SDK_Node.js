/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner';
import GetTransactionDetailsByTransactionIDRIBSZVinInner from './GetTransactionDetailsByTransactionIDRIBSZVinInner';
import GetTransactionDetailsByTransactionIDRIBSZVoutInner from './GetTransactionDetailsByTransactionIDRIBSZVoutInner';
import ListConfirmedTransactionsByAddressRIBSBSCGasPrice from './ListConfirmedTransactionsByAddressRIBSBSCGasPrice';
import ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner from './ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner';
import ListUnconfirmedTransactionsByAddressRIBSB from './ListUnconfirmedTransactionsByAddressRIBSB';
import ListUnconfirmedTransactionsByAddressRIBSBC from './ListUnconfirmedTransactionsByAddressRIBSBC';
import ListUnconfirmedTransactionsByAddressRIBSBSC from './ListUnconfirmedTransactionsByAddressRIBSBSC';
import ListUnconfirmedTransactionsByAddressRIBSD from './ListUnconfirmedTransactionsByAddressRIBSD';
import ListUnconfirmedTransactionsByAddressRIBSD2 from './ListUnconfirmedTransactionsByAddressRIBSD2';
import ListUnconfirmedTransactionsByAddressRIBSE from './ListUnconfirmedTransactionsByAddressRIBSE';
import ListUnconfirmedTransactionsByAddressRIBSEC from './ListUnconfirmedTransactionsByAddressRIBSEC';
import ListUnconfirmedTransactionsByAddressRIBSECFee from './ListUnconfirmedTransactionsByAddressRIBSECFee';
import ListUnconfirmedTransactionsByAddressRIBSL from './ListUnconfirmedTransactionsByAddressRIBSL';
import ListUnconfirmedTransactionsByAddressRIBSZ from './ListUnconfirmedTransactionsByAddressRIBSZ';

/**
 * The ListUnconfirmedTransactionsByAddressRIBS model module.
 * @module model/ListUnconfirmedTransactionsByAddressRIBS
 * @version 1.11.0
 */
class ListUnconfirmedTransactionsByAddressRIBS {
    /**
     * Constructs a new <code>ListUnconfirmedTransactionsByAddressRIBS</code>.
     * @alias module:model/ListUnconfirmedTransactionsByAddressRIBS
     * @param {(module:model/ListUnconfirmedTransactionsByAddressRIBSB|module:model/ListUnconfirmedTransactionsByAddressRIBSBC|module:model/ListUnconfirmedTransactionsByAddressRIBSBSC|module:model/ListUnconfirmedTransactionsByAddressRIBSD|module:model/ListUnconfirmedTransactionsByAddressRIBSD2|module:model/ListUnconfirmedTransactionsByAddressRIBSE|module:model/ListUnconfirmedTransactionsByAddressRIBSEC|module:model/ListUnconfirmedTransactionsByAddressRIBSL|module:model/ListUnconfirmedTransactionsByAddressRIBSZ)} instance The actual instance to initialize ListUnconfirmedTransactionsByAddressRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSB") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSB.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSB from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSB.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSB
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSB: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSBC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSBC.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSBC from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSBC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSBC
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSBC: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSL.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSL from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSL
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSL: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSD") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSD.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSD from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSD.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSD
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSD: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSD2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSD2.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSD2 from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSD2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSD2
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSD2: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSE.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSE from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSE
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSE: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSEC.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSEC from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSEC
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSEC: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSZ") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSZ.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSZ from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSZ.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSZ
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSZ: " + err)
        }

        try {
            if (typeof instance === "ListUnconfirmedTransactionsByAddressRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListUnconfirmedTransactionsByAddressRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create ListUnconfirmedTransactionsByAddressRIBSBSC from JS object
                this.actualInstance = ListUnconfirmedTransactionsByAddressRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListUnconfirmedTransactionsByAddressRIBSBSC
            errorMessages.push("Failed to construct ListUnconfirmedTransactionsByAddressRIBSBSC: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ListUnconfirmedTransactionsByAddressRIBS` with oneOf schemas ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ListUnconfirmedTransactionsByAddressRIBS` with oneOf schemas ListUnconfirmedTransactionsByAddressRIBSB, ListUnconfirmedTransactionsByAddressRIBSBC, ListUnconfirmedTransactionsByAddressRIBSBSC, ListUnconfirmedTransactionsByAddressRIBSD, ListUnconfirmedTransactionsByAddressRIBSD2, ListUnconfirmedTransactionsByAddressRIBSE, ListUnconfirmedTransactionsByAddressRIBSEC, ListUnconfirmedTransactionsByAddressRIBSL, ListUnconfirmedTransactionsByAddressRIBSZ. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ListUnconfirmedTransactionsByAddressRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListUnconfirmedTransactionsByAddressRIBS} obj Optional instance to populate.
     * @return {module:model/ListUnconfirmedTransactionsByAddressRIBS} The populated <code>ListUnconfirmedTransactionsByAddressRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ListUnconfirmedTransactionsByAddressRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>ListUnconfirmedTransactionsByAddressRIBSB</code>, <code>ListUnconfirmedTransactionsByAddressRIBSBC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSBSC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSD</code>, <code>ListUnconfirmedTransactionsByAddressRIBSD2</code>, <code>ListUnconfirmedTransactionsByAddressRIBSE</code>, <code>ListUnconfirmedTransactionsByAddressRIBSEC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSL</code>, <code>ListUnconfirmedTransactionsByAddressRIBSZ</code>.
     * @return {(module:model/ListUnconfirmedTransactionsByAddressRIBSB|module:model/ListUnconfirmedTransactionsByAddressRIBSBC|module:model/ListUnconfirmedTransactionsByAddressRIBSBSC|module:model/ListUnconfirmedTransactionsByAddressRIBSD|module:model/ListUnconfirmedTransactionsByAddressRIBSD2|module:model/ListUnconfirmedTransactionsByAddressRIBSE|module:model/ListUnconfirmedTransactionsByAddressRIBSEC|module:model/ListUnconfirmedTransactionsByAddressRIBSL|module:model/ListUnconfirmedTransactionsByAddressRIBSZ)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ListUnconfirmedTransactionsByAddressRIBSB</code>, <code>ListUnconfirmedTransactionsByAddressRIBSBC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSBSC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSD</code>, <code>ListUnconfirmedTransactionsByAddressRIBSD2</code>, <code>ListUnconfirmedTransactionsByAddressRIBSE</code>, <code>ListUnconfirmedTransactionsByAddressRIBSEC</code>, <code>ListUnconfirmedTransactionsByAddressRIBSL</code>, <code>ListUnconfirmedTransactionsByAddressRIBSZ</code>.
     * @param {(module:model/ListUnconfirmedTransactionsByAddressRIBSB|module:model/ListUnconfirmedTransactionsByAddressRIBSBC|module:model/ListUnconfirmedTransactionsByAddressRIBSBSC|module:model/ListUnconfirmedTransactionsByAddressRIBSD|module:model/ListUnconfirmedTransactionsByAddressRIBSD2|module:model/ListUnconfirmedTransactionsByAddressRIBSE|module:model/ListUnconfirmedTransactionsByAddressRIBSEC|module:model/ListUnconfirmedTransactionsByAddressRIBSL|module:model/ListUnconfirmedTransactionsByAddressRIBSZ)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ListUnconfirmedTransactionsByAddressRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ListUnconfirmedTransactionsByAddressRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ListUnconfirmedTransactionsByAddressRIBS} An instance of ListUnconfirmedTransactionsByAddressRIBS.
     */
    static fromJSON = function(json_string){
        return ListUnconfirmedTransactionsByAddressRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the locktime on the transaction on the specific blockchain, i.e. the blockheight at which the transaction is valid.
 * @member {Number} locktime
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['locktime'] = undefined;

/**
 * Represents the total size of this transaction.
 * @member {Number} size
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['size'] = undefined;

/**
 * Represents the virtual size of this transaction.
 * @member {Number} vSize
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vSize'] = undefined;

/**
 * Defines the version of the transaction.
 * @member {Number} version
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['version'] = undefined;

/**
 * Object Array representation of transaction inputs
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVinInner>} vin
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vin'] = undefined;

/**
 * Object Array representation of transaction outputs
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVoutInner>} vout
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vout'] = undefined;

/**
 * @member {module:model/ListUnconfirmedTransactionsByAddressRIBSECFee} fee
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['fee'] = undefined;

/**
 * Represents the amount of gas used by this specific transaction alone.
 * @member {String} gasLimit
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['gasLimit'] = undefined;

/**
 * @member {module:model/ListConfirmedTransactionsByAddressRIBSBSCGasPrice} gasPrice
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['gasPrice'] = undefined;

/**
 * Represents additional information that is required for the transaction.
 * @member {String} inputData
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['inputData'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {Number} nonce
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['nonce'] = undefined;

/**
 * String representation of the transaction status
 * @member {String} transactionStatus
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['transactionStatus'] = undefined;

/**
 * It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.
 * @member {String} bindingSig
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['bindingSig'] = undefined;

/**
 * Represents a block height after which the transaction will expire.
 * @member {Number} expiryHeight
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['expiryHeight'] = undefined;

/**
 * Represents an encoding of a JoinSplitSig public validating key.
 * @member {String} joinSplitPubKey
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['joinSplitPubKey'] = undefined;

/**
 * Is used to sign transactions that contain at least one JoinSplit description.
 * @member {String} joinSplitSig
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['joinSplitSig'] = undefined;

/**
 * \"Overwinter\" is the network upgrade for the Zcash blockchain.
 * @member {Boolean} overwintered
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['overwintered'] = undefined;

/**
 * Represents a sequence of JoinSplit descriptions using BCTV14 proofs.
 * @member {Array.<module:model/ListConfirmedTransactionsByAddressRIBSZVJoinSplitInner>} vJoinSplit
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vJoinSplit'] = undefined;

/**
 * Object Array representation of transaction output descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner>} vShieldedOutput
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vShieldedOutput'] = undefined;

/**
 * Object Array representation of transaction spend descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner>} vShieldedSpend
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['vShieldedSpend'] = undefined;

/**
 * Defines the transaction value balance.
 * @member {String} valueBalance
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['valueBalance'] = undefined;

/**
 * Represents the transaction version group ID.
 * @member {String} versionGroupId
 */
ListUnconfirmedTransactionsByAddressRIBS.prototype['versionGroupId'] = undefined;


ListUnconfirmedTransactionsByAddressRIBS.OneOf = ["ListUnconfirmedTransactionsByAddressRIBSB", "ListUnconfirmedTransactionsByAddressRIBSBC", "ListUnconfirmedTransactionsByAddressRIBSBSC", "ListUnconfirmedTransactionsByAddressRIBSD", "ListUnconfirmedTransactionsByAddressRIBSD2", "ListUnconfirmedTransactionsByAddressRIBSE", "ListUnconfirmedTransactionsByAddressRIBSEC", "ListUnconfirmedTransactionsByAddressRIBSL", "ListUnconfirmedTransactionsByAddressRIBSZ"];

export default ListUnconfirmedTransactionsByAddressRIBS;

