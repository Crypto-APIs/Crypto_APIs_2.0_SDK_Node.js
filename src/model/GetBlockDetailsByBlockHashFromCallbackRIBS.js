/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetBlockDetailsByBlockHashFromCallbackRIBSB from './GetBlockDetailsByBlockHashFromCallbackRIBSB';
import GetBlockDetailsByBlockHashFromCallbackRIBSBC from './GetBlockDetailsByBlockHashFromCallbackRIBSBC';
import GetBlockDetailsByBlockHashFromCallbackRIBSBSC from './GetBlockDetailsByBlockHashFromCallbackRIBSBSC';
import GetBlockDetailsByBlockHashFromCallbackRIBSD from './GetBlockDetailsByBlockHashFromCallbackRIBSD';
import GetBlockDetailsByBlockHashFromCallbackRIBSD2 from './GetBlockDetailsByBlockHashFromCallbackRIBSD2';
import GetBlockDetailsByBlockHashFromCallbackRIBSE from './GetBlockDetailsByBlockHashFromCallbackRIBSE';
import GetBlockDetailsByBlockHashFromCallbackRIBSEC from './GetBlockDetailsByBlockHashFromCallbackRIBSEC';
import GetBlockDetailsByBlockHashFromCallbackRIBSL from './GetBlockDetailsByBlockHashFromCallbackRIBSL';
import GetBlockDetailsByBlockHashFromCallbackRIBST from './GetBlockDetailsByBlockHashFromCallbackRIBST';
import GetBlockDetailsByBlockHashFromCallbackRIBSX from './GetBlockDetailsByBlockHashFromCallbackRIBSX';
import GetBlockDetailsByBlockHashFromCallbackRIBSZ from './GetBlockDetailsByBlockHashFromCallbackRIBSZ';
import GetBlockDetailsByBlockHashFromCallbackRIBSZ2 from './GetBlockDetailsByBlockHashFromCallbackRIBSZ2';
import GetLatestMinedXRPRippleBlockRITotalCoins from './GetLatestMinedXRPRippleBlockRITotalCoins';
import GetLatestMinedXRPRippleBlockRITotalFees from './GetLatestMinedXRPRippleBlockRITotalFees';

/**
 * The GetBlockDetailsByBlockHashFromCallbackRIBS model module.
 * @module model/GetBlockDetailsByBlockHashFromCallbackRIBS
 * @version 1.11.0
 */
class GetBlockDetailsByBlockHashFromCallbackRIBS {
    /**
     * Constructs a new <code>GetBlockDetailsByBlockHashFromCallbackRIBS</code>.
     * @alias module:model/GetBlockDetailsByBlockHashFromCallbackRIBS
     * @param {(module:model/GetBlockDetailsByBlockHashFromCallbackRIBSB|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBSC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD2|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSE|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSEC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSL|module:model/GetBlockDetailsByBlockHashFromCallbackRIBST|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSX|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ2)} instance The actual instance to initialize GetBlockDetailsByBlockHashFromCallbackRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSB") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSB.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSB from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSB.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSB
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSB: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSBC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSBC.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSBC from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSBC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSBC
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSBC: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSL.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSL from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSL
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSL: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSD") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSD.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSD from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSD.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSD
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSD: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSD2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSD2.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSD2 from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSD2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSD2
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSD2: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSE.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSE from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSE
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSE: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSBSC from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSBSC
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSBSC: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSEC.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSEC from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSEC
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSEC: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSZ") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSZ.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSZ from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSZ.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSZ
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSZ: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSX") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSX.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSX from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSX.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSX
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSX: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBSZ2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBSZ2.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBSZ2 from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBSZ2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBSZ2
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBSZ2: " + err)
        }

        try {
            if (typeof instance === "GetBlockDetailsByBlockHashFromCallbackRIBST") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetBlockDetailsByBlockHashFromCallbackRIBST.validateJSON(instance); // throw an exception if no match
                // create GetBlockDetailsByBlockHashFromCallbackRIBST from JS object
                this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBST.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetBlockDetailsByBlockHashFromCallbackRIBST
            errorMessages.push("Failed to construct GetBlockDetailsByBlockHashFromCallbackRIBST: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetBlockDetailsByBlockHashFromCallbackRIBS` with oneOf schemas GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetBlockDetailsByBlockHashFromCallbackRIBS` with oneOf schemas GetBlockDetailsByBlockHashFromCallbackRIBSB, GetBlockDetailsByBlockHashFromCallbackRIBSBC, GetBlockDetailsByBlockHashFromCallbackRIBSBSC, GetBlockDetailsByBlockHashFromCallbackRIBSD, GetBlockDetailsByBlockHashFromCallbackRIBSD2, GetBlockDetailsByBlockHashFromCallbackRIBSE, GetBlockDetailsByBlockHashFromCallbackRIBSEC, GetBlockDetailsByBlockHashFromCallbackRIBSL, GetBlockDetailsByBlockHashFromCallbackRIBST, GetBlockDetailsByBlockHashFromCallbackRIBSX, GetBlockDetailsByBlockHashFromCallbackRIBSZ, GetBlockDetailsByBlockHashFromCallbackRIBSZ2. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetBlockDetailsByBlockHashFromCallbackRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetBlockDetailsByBlockHashFromCallbackRIBS} obj Optional instance to populate.
     * @return {module:model/GetBlockDetailsByBlockHashFromCallbackRIBS} The populated <code>GetBlockDetailsByBlockHashFromCallbackRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetBlockDetailsByBlockHashFromCallbackRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>GetBlockDetailsByBlockHashFromCallbackRIBSB</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSBC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSBSC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSD</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSD2</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSE</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSEC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSL</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBST</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSX</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSZ</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSZ2</code>.
     * @return {(module:model/GetBlockDetailsByBlockHashFromCallbackRIBSB|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBSC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD2|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSE|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSEC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSL|module:model/GetBlockDetailsByBlockHashFromCallbackRIBST|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSX|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ2)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>GetBlockDetailsByBlockHashFromCallbackRIBSB</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSBC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSBSC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSD</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSD2</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSE</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSEC</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSL</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBST</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSX</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSZ</code>, <code>GetBlockDetailsByBlockHashFromCallbackRIBSZ2</code>.
     * @param {(module:model/GetBlockDetailsByBlockHashFromCallbackRIBSB|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSBSC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSD2|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSE|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSEC|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSL|module:model/GetBlockDetailsByBlockHashFromCallbackRIBST|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSX|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ|module:model/GetBlockDetailsByBlockHashFromCallbackRIBSZ2)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetBlockDetailsByBlockHashFromCallbackRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetBlockDetailsByBlockHashFromCallbackRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetBlockDetailsByBlockHashFromCallbackRIBS} An instance of GetBlockDetailsByBlockHashFromCallbackRIBS.
     */
    static fromJSON = function(json_string){
        return GetBlockDetailsByBlockHashFromCallbackRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents a specific sub-unit of Zcash. Bits have two-decimal precision
 * @member {String} bits
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['bits'] = undefined;

/**
 * Represents a hexadecimal number of all the hashes necessary to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.
 * @member {String} chainwork
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['chainwork'] = undefined;

/**
 * Defines how difficult it is for a specific miner to mine the block.
 * @member {String} difficulty
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['difficulty'] = undefined;

/**
 * Defines the single and final (root) node of a Merkle tree. It is the combined hash of all transactions' hashes that are part of a blockchain block.
 * @member {String} merkleRoot
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['merkleRoot'] = undefined;

/**
 * Represents a random value that can be adjusted to satisfy the proof of work
 * @member {String} nonce
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['nonce'] = undefined;

/**
 * Represents the total size of the block in Bytes.
 * @member {Number} size
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['size'] = undefined;

/**
 * Defines the numeric representation of the block size excluding the witness data.
 * @member {Number} strippedSize
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['strippedSize'] = undefined;

/**
 * Represents the transaction version number.
 * @member {Number} version
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['version'] = undefined;

/**
 * Is the hexadecimal string representation of the block's version.
 * @member {String} versionHex
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['versionHex'] = undefined;

/**
 * Represents a measurement to compare the size of different transactions to each other in proportion to the block size limit.
 * @member {Number} weight
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['weight'] = undefined;

/**
 * Defines the numeric representation of the block size excluding the witness data.
 * @member {Number} strippedsize
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['strippedsize'] = undefined;

/**
 * Represents any data that can be included by the miner in the block.
 * @member {String} extraData
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['extraData'] = undefined;

/**
 * Represents the maximum amount of gas allowed in the block in order to determine how many transactions it can fit.
 * @member {Number} gasLimit
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['gasLimit'] = undefined;

/**
 * Defines how much of the gas for the block has been used.
 * @member {Number} gasUsed
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['gasUsed'] = undefined;

/**
 * Specifies the amount of time required for the block to be mined in seconds.
 * @member {Number} minedInSeconds
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['minedInSeconds'] = undefined;

/**
 * Defines the combined hash of all uncles for a given parent.
 * @member {String} sha3Uncles
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['sha3Uncles'] = undefined;

/**
 * Defines the total difficulty of the chain until this block, i.e. how difficult it is for a specific miner to mine a new block.
 * @member {String} totalDifficulty
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['totalDifficulty'] = undefined;

/**
 * @member {Array.<String>} uncles
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['uncles'] = undefined;

/**
 * Represents the Directory Service block which contains metadata about the miners who participate in the consensus protocol.
 * @member {Number} dsBlock
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['dsBlock'] = undefined;

/**
 * Defines how difficult it is to mine the dsBlocks.
 * @member {String} dsDifficulty
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['dsDifficulty'] = undefined;

/**
 * Represents a part of the DS Committee which leads the consensus protocol for the epoch.
 * @member {String} dsLeader
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['dsLeader'] = undefined;

/**
 * @member {Array.<String>} microBlocks
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['microBlocks'] = undefined;

/**
 * @member {module:model/GetLatestMinedXRPRippleBlockRITotalCoins} totalCoins
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['totalCoins'] = undefined;

/**
 * @member {module:model/GetLatestMinedXRPRippleBlockRITotalFees} totalFees
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['totalFees'] = undefined;

/**
 * Represents the bandwidth used for the transaction.
 * @member {String} bandwidthUsed
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['bandwidthUsed'] = undefined;

/**
 * Represents the block burned TRX.
 * @member {String} burnedTrx
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['burnedTrx'] = undefined;

/**
 * Representats the used energy for the transaction.
 * @member {String} energyUsed
 */
GetBlockDetailsByBlockHashFromCallbackRIBS.prototype['energyUsed'] = undefined;


GetBlockDetailsByBlockHashFromCallbackRIBS.OneOf = ["GetBlockDetailsByBlockHashFromCallbackRIBSB", "GetBlockDetailsByBlockHashFromCallbackRIBSBC", "GetBlockDetailsByBlockHashFromCallbackRIBSBSC", "GetBlockDetailsByBlockHashFromCallbackRIBSD", "GetBlockDetailsByBlockHashFromCallbackRIBSD2", "GetBlockDetailsByBlockHashFromCallbackRIBSE", "GetBlockDetailsByBlockHashFromCallbackRIBSEC", "GetBlockDetailsByBlockHashFromCallbackRIBSL", "GetBlockDetailsByBlockHashFromCallbackRIBST", "GetBlockDetailsByBlockHashFromCallbackRIBSX", "GetBlockDetailsByBlockHashFromCallbackRIBSZ", "GetBlockDetailsByBlockHashFromCallbackRIBSZ2"];

export default GetBlockDetailsByBlockHashFromCallbackRIBS;

