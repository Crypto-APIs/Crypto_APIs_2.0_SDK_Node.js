/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrepareTransactionFromAddressRIBSBSC from './PrepareTransactionFromAddressRIBSBSC';
import PrepareTransactionFromAddressRIBSBSCFee from './PrepareTransactionFromAddressRIBSBSCFee';
import PrepareTransactionFromAddressRIBSE from './PrepareTransactionFromAddressRIBSE';
import PrepareTransactionFromAddressRIBSEC from './PrepareTransactionFromAddressRIBSEC';

/**
 * The PrepareTransactionFromAddressRIBS model module.
 * @module model/PrepareTransactionFromAddressRIBS
 * @version 1.11.0
 */
class PrepareTransactionFromAddressRIBS {
    /**
     * Constructs a new <code>PrepareTransactionFromAddressRIBS</code>.
     * @alias module:model/PrepareTransactionFromAddressRIBS
     * @param {(module:model/PrepareTransactionFromAddressRIBSBSC|module:model/PrepareTransactionFromAddressRIBSE|module:model/PrepareTransactionFromAddressRIBSEC)} instance The actual instance to initialize PrepareTransactionFromAddressRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "PrepareTransactionFromAddressRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareTransactionFromAddressRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create PrepareTransactionFromAddressRIBSBSC from JS object
                this.actualInstance = PrepareTransactionFromAddressRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareTransactionFromAddressRIBSBSC
            errorMessages.push("Failed to construct PrepareTransactionFromAddressRIBSBSC: " + err)
        }

        try {
            if (typeof instance === "PrepareTransactionFromAddressRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareTransactionFromAddressRIBSE.validateJSON(instance); // throw an exception if no match
                // create PrepareTransactionFromAddressRIBSE from JS object
                this.actualInstance = PrepareTransactionFromAddressRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareTransactionFromAddressRIBSE
            errorMessages.push("Failed to construct PrepareTransactionFromAddressRIBSE: " + err)
        }

        try {
            if (typeof instance === "PrepareTransactionFromAddressRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareTransactionFromAddressRIBSEC.validateJSON(instance); // throw an exception if no match
                // create PrepareTransactionFromAddressRIBSEC from JS object
                this.actualInstance = PrepareTransactionFromAddressRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareTransactionFromAddressRIBSEC
            errorMessages.push("Failed to construct PrepareTransactionFromAddressRIBSEC: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PrepareTransactionFromAddressRIBS` with oneOf schemas PrepareTransactionFromAddressRIBSBSC, PrepareTransactionFromAddressRIBSE, PrepareTransactionFromAddressRIBSEC. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PrepareTransactionFromAddressRIBS` with oneOf schemas PrepareTransactionFromAddressRIBSBSC, PrepareTransactionFromAddressRIBSE, PrepareTransactionFromAddressRIBSEC. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PrepareTransactionFromAddressRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareTransactionFromAddressRIBS} obj Optional instance to populate.
     * @return {module:model/PrepareTransactionFromAddressRIBS} The populated <code>PrepareTransactionFromAddressRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PrepareTransactionFromAddressRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>PrepareTransactionFromAddressRIBSBSC</code>, <code>PrepareTransactionFromAddressRIBSE</code>, <code>PrepareTransactionFromAddressRIBSEC</code>.
     * @return {(module:model/PrepareTransactionFromAddressRIBSBSC|module:model/PrepareTransactionFromAddressRIBSE|module:model/PrepareTransactionFromAddressRIBSEC)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>PrepareTransactionFromAddressRIBSBSC</code>, <code>PrepareTransactionFromAddressRIBSE</code>, <code>PrepareTransactionFromAddressRIBSEC</code>.
     * @param {(module:model/PrepareTransactionFromAddressRIBSBSC|module:model/PrepareTransactionFromAddressRIBSE|module:model/PrepareTransactionFromAddressRIBSEC)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PrepareTransactionFromAddressRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PrepareTransactionFromAddressRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PrepareTransactionFromAddressRIBS} An instance of PrepareTransactionFromAddressRIBS.
     */
    static fromJSON = function(json_string){
        return PrepareTransactionFromAddressRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/PrepareTransactionFromAddressRIBSBSCFee} fee
 */
PrepareTransactionFromAddressRIBS.prototype['fee'] = undefined;

/**
 * Representation of the transaction type
 * @member {module:model/PrepareTransactionFromAddressRIBS.TransactionTypeEnum} transactionType
 */
PrepareTransactionFromAddressRIBS.prototype['transactionType'] = undefined;

/**
 * Represents the unit of the amount transacted.
 * @member {String} unit
 */
PrepareTransactionFromAddressRIBS.prototype['unit'] = undefined;


PrepareTransactionFromAddressRIBS.OneOf = ["PrepareTransactionFromAddressRIBSBSC", "PrepareTransactionFromAddressRIBSE", "PrepareTransactionFromAddressRIBSEC"];

export default PrepareTransactionFromAddressRIBS;

