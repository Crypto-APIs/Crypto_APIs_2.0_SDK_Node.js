/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CoinsForwardingFailDataItem model module.
 * @module model/CoinsForwardingFailDataItem
 * @version 1.7.1
 */
class CoinsForwardingFailDataItem {
    /**
     * Constructs a new <code>CoinsForwardingFailDataItem</code>.
     * Defines an &#x60;item&#x60; as one result.
     * @alias module:model/CoinsForwardingFailDataItem
     * @param blockchain {String} Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param network {String} Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.
     * @param fromAddress {String} Represents the hash of the address that provides the coins.
     * @param toAddress {String} Represents the hash of the address to forward the coins to.
     * @param triggerTransactionId {String} Defines the unique Transaction ID that triggered the coin forwarding.
     * @param errorCode {module:model/CoinsForwardingFailDataItem.ErrorCodeEnum} Represents the error code received for the failed coin forwarding.
     * @param errorMessage {String} Represents the error message received for the failed coin forwarding.
     */
    constructor(blockchain, network, fromAddress, toAddress, triggerTransactionId, errorCode, errorMessage) { 
        
        CoinsForwardingFailDataItem.initialize(this, blockchain, network, fromAddress, toAddress, triggerTransactionId, errorCode, errorMessage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blockchain, network, fromAddress, toAddress, triggerTransactionId, errorCode, errorMessage) { 
        obj['blockchain'] = blockchain;
        obj['network'] = network;
        obj['fromAddress'] = fromAddress;
        obj['toAddress'] = toAddress;
        obj['triggerTransactionId'] = triggerTransactionId;
        obj['errorCode'] = errorCode;
        obj['errorMessage'] = errorMessage;
    }

    /**
     * Constructs a <code>CoinsForwardingFailDataItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoinsForwardingFailDataItem} obj Optional instance to populate.
     * @return {module:model/CoinsForwardingFailDataItem} The populated <code>CoinsForwardingFailDataItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoinsForwardingFailDataItem();

            if (data.hasOwnProperty('blockchain')) {
                obj['blockchain'] = ApiClient.convertToType(data['blockchain'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('fromAddress')) {
                obj['fromAddress'] = ApiClient.convertToType(data['fromAddress'], 'String');
            }
            if (data.hasOwnProperty('toAddress')) {
                obj['toAddress'] = ApiClient.convertToType(data['toAddress'], 'String');
            }
            if (data.hasOwnProperty('triggerTransactionId')) {
                obj['triggerTransactionId'] = ApiClient.convertToType(data['triggerTransactionId'], 'String');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
 * @member {String} blockchain
 */
CoinsForwardingFailDataItem.prototype['blockchain'] = undefined;

/**
 * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\", \"rinkeby\" are test networks.
 * @member {String} network
 */
CoinsForwardingFailDataItem.prototype['network'] = undefined;

/**
 * Represents the hash of the address that provides the coins.
 * @member {String} fromAddress
 */
CoinsForwardingFailDataItem.prototype['fromAddress'] = undefined;

/**
 * Represents the hash of the address to forward the coins to.
 * @member {String} toAddress
 */
CoinsForwardingFailDataItem.prototype['toAddress'] = undefined;

/**
 * Defines the unique Transaction ID that triggered the coin forwarding.
 * @member {String} triggerTransactionId
 */
CoinsForwardingFailDataItem.prototype['triggerTransactionId'] = undefined;

/**
 * Represents the error code received for the failed coin forwarding.
 * @member {module:model/CoinsForwardingFailDataItem.ErrorCodeEnum} errorCode
 */
CoinsForwardingFailDataItem.prototype['errorCode'] = undefined;

/**
 * Represents the error message received for the failed coin forwarding.
 * @member {String} errorMessage
 */
CoinsForwardingFailDataItem.prototype['errorMessage'] = undefined;





/**
 * Allowed values for the <code>errorCode</code> property.
 * @enum {String}
 * @readonly
 */
CoinsForwardingFailDataItem['ErrorCodeEnum'] = {

    /**
     * value: "NOT_ENOUGH_CREDITS"
     * @const
     */
    "NOT_ENOUGH_CREDITS": "NOT_ENOUGH_CREDITS",

    /**
     * value: "WRONG_ADDRESS_CREDENTIALS"
     * @const
     */
    "WRONG_ADDRESS_CREDENTIALS": "WRONG_ADDRESS_CREDENTIALS"
};



export default CoinsForwardingFailDataItem;

