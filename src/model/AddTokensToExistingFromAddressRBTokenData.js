/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken from './AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken';
import AddTokensToExistingFromAddressRBTokenDataEthereumToken from './AddTokensToExistingFromAddressRBTokenDataEthereumToken';

/**
 * The AddTokensToExistingFromAddressRBTokenData model module.
 * @module model/AddTokensToExistingFromAddressRBTokenData
 * @version 1.11.0
 */
class AddTokensToExistingFromAddressRBTokenData {
    /**
     * Constructs a new <code>AddTokensToExistingFromAddressRBTokenData</code>.
     * @alias module:model/AddTokensToExistingFromAddressRBTokenData
     * @param {(module:model/AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken|module:model/AddTokensToExistingFromAddressRBTokenDataEthereumToken)} instance The actual instance to initialize AddTokensToExistingFromAddressRBTokenData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken.validateJSON(instance); // throw an exception if no match
                // create AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken from JS object
                this.actualInstance = AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken
            errorMessages.push("Failed to construct AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken: " + err)
        }

        try {
            if (typeof instance === "AddTokensToExistingFromAddressRBTokenDataEthereumToken") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddTokensToExistingFromAddressRBTokenDataEthereumToken.validateJSON(instance); // throw an exception if no match
                // create AddTokensToExistingFromAddressRBTokenDataEthereumToken from JS object
                this.actualInstance = AddTokensToExistingFromAddressRBTokenDataEthereumToken.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddTokensToExistingFromAddressRBTokenDataEthereumToken
            errorMessages.push("Failed to construct AddTokensToExistingFromAddressRBTokenDataEthereumToken: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddTokensToExistingFromAddressRBTokenData` with oneOf schemas AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken, AddTokensToExistingFromAddressRBTokenDataEthereumToken. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddTokensToExistingFromAddressRBTokenData` with oneOf schemas AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken, AddTokensToExistingFromAddressRBTokenDataEthereumToken. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddTokensToExistingFromAddressRBTokenData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddTokensToExistingFromAddressRBTokenData} obj Optional instance to populate.
     * @return {module:model/AddTokensToExistingFromAddressRBTokenData} The populated <code>AddTokensToExistingFromAddressRBTokenData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddTokensToExistingFromAddressRBTokenData(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken</code>, <code>AddTokensToExistingFromAddressRBTokenDataEthereumToken</code>.
     * @return {(module:model/AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken|module:model/AddTokensToExistingFromAddressRBTokenDataEthereumToken)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken</code>, <code>AddTokensToExistingFromAddressRBTokenDataEthereumToken</code>.
     * @param {(module:model/AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken|module:model/AddTokensToExistingFromAddressRBTokenDataEthereumToken)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddTokensToExistingFromAddressRBTokenData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddTokensToExistingFromAddressRBTokenData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddTokensToExistingFromAddressRBTokenData} An instance of AddTokensToExistingFromAddressRBTokenData.
     */
    static fromJSON = function(json_string){
        return AddTokensToExistingFromAddressRBTokenData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the specific `propertyId` of the token data that will be forwarded.
 * @member {Number} propertyId
 */
AddTokensToExistingFromAddressRBTokenData.prototype['propertyId'] = undefined;

/**
 * Represents the specific `contractAddress` of the Token that will be forwarded.
 * @member {String} contractAddress
 */
AddTokensToExistingFromAddressRBTokenData.prototype['contractAddress'] = undefined;


AddTokensToExistingFromAddressRBTokenData.OneOf = ["AddTokensToExistingFromAddressRBTokenDataBitcoinOmniToken", "AddTokensToExistingFromAddressRBTokenDataEthereumToken"];

export default AddTokensToExistingFromAddressRBTokenData;

