/**
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend model module.
 * @module model/ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend
 * @version 1.3.0
 */
class ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend {
    /**
     * Constructs a new <code>ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend</code>.
     * @alias module:model/ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend
     * @param anchor {String} Defines a Merkle tree root of a note commitment tree which uniquely identifies a note commitment tree state given the assumed security properties of the Merkle tree’s hash function.
     * @param cv {String} Defines a value commitment to the value of the input note.
     * @param nullifier {String} Represents a sequence of nullifiers of the input notes.
     * @param proof {String} Represents the proof.
     * @param rk {String} Represents the randomized validating key for spendAuthSig.
     * @param spendAuthSig {String} Used to prove knowledge of the spending key authorizing spending of an input note.
     */
    constructor(anchor, cv, nullifier, proof, rk, spendAuthSig) { 
        
        ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.initialize(this, anchor, cv, nullifier, proof, rk, spendAuthSig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, anchor, cv, nullifier, proof, rk, spendAuthSig) { 
        obj['anchor'] = anchor;
        obj['cv'] = cv;
        obj['nullifier'] = nullifier;
        obj['proof'] = proof;
        obj['rk'] = rk;
        obj['spendAuthSig'] = spendAuthSig;
    }

    /**
     * Constructs a <code>ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend} obj Optional instance to populate.
     * @return {module:model/ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend} The populated <code>ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('cv')) {
                obj['cv'] = ApiClient.convertToType(data['cv'], 'String');
            }
            if (data.hasOwnProperty('nullifier')) {
                obj['nullifier'] = ApiClient.convertToType(data['nullifier'], 'String');
            }
            if (data.hasOwnProperty('proof')) {
                obj['proof'] = ApiClient.convertToType(data['proof'], 'String');
            }
            if (data.hasOwnProperty('rk')) {
                obj['rk'] = ApiClient.convertToType(data['rk'], 'String');
            }
            if (data.hasOwnProperty('spendAuthSig')) {
                obj['spendAuthSig'] = ApiClient.convertToType(data['spendAuthSig'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Defines a Merkle tree root of a note commitment tree which uniquely identifies a note commitment tree state given the assumed security properties of the Merkle tree’s hash function.
 * @member {String} anchor
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['anchor'] = undefined;

/**
 * Defines a value commitment to the value of the input note.
 * @member {String} cv
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['cv'] = undefined;

/**
 * Represents a sequence of nullifiers of the input notes.
 * @member {String} nullifier
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['nullifier'] = undefined;

/**
 * Represents the proof.
 * @member {String} proof
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['proof'] = undefined;

/**
 * Represents the randomized validating key for spendAuthSig.
 * @member {String} rk
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['rk'] = undefined;

/**
 * Used to prove knowledge of the spending key authorizing spending of an input note.
 * @member {String} spendAuthSig
 */
ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend.prototype['spendAuthSig'] = undefined;






export default ListUnspentTransactionOutputsByAddressRIBlockchainSpecificVShieldedSpend;

