/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokensForwardingSuccessErc20 from './TokensForwardingSuccessErc20';
import TokensForwardingSuccessErc721 from './TokensForwardingSuccessErc721';
import TokensForwardingSuccessOmni from './TokensForwardingSuccessOmni';

/**
 * The TokensForwardingSuccessToken model module.
 * @module model/TokensForwardingSuccessToken
 * @version 1.11.0
 */
class TokensForwardingSuccessToken {
    /**
     * Constructs a new <code>TokensForwardingSuccessToken</code>.
     * @alias module:model/TokensForwardingSuccessToken
     * @param {(module:model/TokensForwardingSuccessErc20|module:model/TokensForwardingSuccessErc721|module:model/TokensForwardingSuccessOmni)} instance The actual instance to initialize TokensForwardingSuccessToken.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "TokensForwardingSuccessErc20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TokensForwardingSuccessErc20.validateJSON(instance); // throw an exception if no match
                // create TokensForwardingSuccessErc20 from JS object
                this.actualInstance = TokensForwardingSuccessErc20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokensForwardingSuccessErc20
            errorMessages.push("Failed to construct TokensForwardingSuccessErc20: " + err)
        }

        try {
            if (typeof instance === "TokensForwardingSuccessErc721") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TokensForwardingSuccessErc721.validateJSON(instance); // throw an exception if no match
                // create TokensForwardingSuccessErc721 from JS object
                this.actualInstance = TokensForwardingSuccessErc721.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokensForwardingSuccessErc721
            errorMessages.push("Failed to construct TokensForwardingSuccessErc721: " + err)
        }

        try {
            if (typeof instance === "TokensForwardingSuccessOmni") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TokensForwardingSuccessOmni.validateJSON(instance); // throw an exception if no match
                // create TokensForwardingSuccessOmni from JS object
                this.actualInstance = TokensForwardingSuccessOmni.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokensForwardingSuccessOmni
            errorMessages.push("Failed to construct TokensForwardingSuccessOmni: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TokensForwardingSuccessToken` with oneOf schemas TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TokensForwardingSuccessToken` with oneOf schemas TokensForwardingSuccessErc20, TokensForwardingSuccessErc721, TokensForwardingSuccessOmni. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TokensForwardingSuccessToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokensForwardingSuccessToken} obj Optional instance to populate.
     * @return {module:model/TokensForwardingSuccessToken} The populated <code>TokensForwardingSuccessToken</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TokensForwardingSuccessToken(data);
    }

    /**
     * Gets the actual instance, which can be <code>TokensForwardingSuccessErc20</code>, <code>TokensForwardingSuccessErc721</code>, <code>TokensForwardingSuccessOmni</code>.
     * @return {(module:model/TokensForwardingSuccessErc20|module:model/TokensForwardingSuccessErc721|module:model/TokensForwardingSuccessOmni)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TokensForwardingSuccessErc20</code>, <code>TokensForwardingSuccessErc721</code>, <code>TokensForwardingSuccessOmni</code>.
     * @param {(module:model/TokensForwardingSuccessErc20|module:model/TokensForwardingSuccessErc721|module:model/TokensForwardingSuccessOmni)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TokensForwardingSuccessToken.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TokensForwardingSuccessToken from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TokensForwardingSuccessToken} An instance of TokensForwardingSuccessToken.
     */
    static fromJSON = function(json_string){
        return TokensForwardingSuccessToken.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Specifies the name of the token.
 * @member {String} name
 */
TokensForwardingSuccessToken.prototype['name'] = undefined;

/**
 * Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
 * @member {String} symbol
 */
TokensForwardingSuccessToken.prototype['symbol'] = undefined;

/**
 * Defines how many decimals can be used to break the token.
 * @member {String} decimals
 */
TokensForwardingSuccessToken.prototype['decimals'] = undefined;

/**
 * Defines the amount of tokens sent with the confirmed transaction.
 * @member {String} amount
 */
TokensForwardingSuccessToken.prototype['amount'] = undefined;

/**
 * Specifies the address of the contract.
 * @member {String} contractAddress
 */
TokensForwardingSuccessToken.prototype['contractAddress'] = undefined;

/**
 * Specifies the ID of the token.
 * @member {String} tokenId
 */
TokensForwardingSuccessToken.prototype['tokenId'] = undefined;

/**
 * Defines the ID of the property for Omni Layer.
 * @member {String} propertyId
 */
TokensForwardingSuccessToken.prototype['propertyId'] = undefined;

/**
 * Defines the type of the transaction.
 * @member {String} transactionType
 */
TokensForwardingSuccessToken.prototype['transactionType'] = undefined;

/**
 * The transaction ID used to create the token.
 * @member {String} createdByTransactionId
 */
TokensForwardingSuccessToken.prototype['createdByTransactionId'] = undefined;


TokensForwardingSuccessToken.OneOf = ["TokensForwardingSuccessErc20", "TokensForwardingSuccessErc721", "TokensForwardingSuccessOmni"];

export default TokensForwardingSuccessToken;

