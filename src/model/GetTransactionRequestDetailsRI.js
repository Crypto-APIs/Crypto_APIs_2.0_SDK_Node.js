/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTransactionRequestDetailsRIRecipientsInner from './GetTransactionRequestDetailsRIRecipientsInner';

/**
 * The GetTransactionRequestDetailsRI model module.
 * @module model/GetTransactionRequestDetailsRI
 * @version 1.7.3
 */
class GetTransactionRequestDetailsRI {
    /**
     * Constructs a new <code>GetTransactionRequestDetailsRI</code>.
     * @alias module:model/GetTransactionRequestDetailsRI
     * @param additionalDetails {String} Defines an optional note for additional details.
     * @param blockchain {module:model/GetTransactionRequestDetailsRI.BlockchainEnum} Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
     * @param feePriority {module:model/GetTransactionRequestDetailsRI.FeePriorityEnum} Defines the priority for the fee, if it is \"slow\", \"standard\" or \"fast\".
     * @param network {module:model/GetTransactionRequestDetailsRI.NetworkEnum} Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
     * @param recipients {Array.<module:model/GetTransactionRequestDetailsRIRecipientsInner>} Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
     * @param totalTransactionAmount {String} Defines the total transaction amount.
     * @param transactionRequestStatus {module:model/GetTransactionRequestDetailsRI.TransactionRequestStatusEnum} Defines the status of the transaction request, e.g. pending.
     * @param transactionType {module:model/GetTransactionRequestDetailsRI.TransactionTypeEnum} Defines the transaction type, if it is for coins or tokens.
     * @param unit {String} Defines the unit of the amount.
     * @param walletId {String} Defines the unique ID of the Wallet.
     */
    constructor(additionalDetails, blockchain, feePriority, network, recipients, totalTransactionAmount, transactionRequestStatus, transactionType, unit, walletId) { 
        
        GetTransactionRequestDetailsRI.initialize(this, additionalDetails, blockchain, feePriority, network, recipients, totalTransactionAmount, transactionRequestStatus, transactionType, unit, walletId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, additionalDetails, blockchain, feePriority, network, recipients, totalTransactionAmount, transactionRequestStatus, transactionType, unit, walletId) { 
        obj['additionalDetails'] = additionalDetails;
        obj['blockchain'] = blockchain;
        obj['feePriority'] = feePriority;
        obj['network'] = network;
        obj['recipients'] = recipients;
        obj['totalTransactionAmount'] = totalTransactionAmount;
        obj['transactionRequestStatus'] = transactionRequestStatus;
        obj['transactionType'] = transactionType;
        obj['unit'] = unit;
        obj['walletId'] = walletId;
    }

    /**
     * Constructs a <code>GetTransactionRequestDetailsRI</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetTransactionRequestDetailsRI} obj Optional instance to populate.
     * @return {module:model/GetTransactionRequestDetailsRI} The populated <code>GetTransactionRequestDetailsRI</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTransactionRequestDetailsRI();

            if (data.hasOwnProperty('additionalDetails')) {
                obj['additionalDetails'] = ApiClient.convertToType(data['additionalDetails'], 'String');
            }
            if (data.hasOwnProperty('blockchain')) {
                obj['blockchain'] = ApiClient.convertToType(data['blockchain'], 'String');
            }
            if (data.hasOwnProperty('feePriority')) {
                obj['feePriority'] = ApiClient.convertToType(data['feePriority'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [GetTransactionRequestDetailsRIRecipientsInner]);
            }
            if (data.hasOwnProperty('totalTransactionAmount')) {
                obj['totalTransactionAmount'] = ApiClient.convertToType(data['totalTransactionAmount'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('transactionRequestStatus')) {
                obj['transactionRequestStatus'] = ApiClient.convertToType(data['transactionRequestStatus'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('walletId')) {
                obj['walletId'] = ApiClient.convertToType(data['walletId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Defines an optional note for additional details.
 * @member {String} additionalDetails
 */
GetTransactionRequestDetailsRI.prototype['additionalDetails'] = undefined;

/**
 * Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.
 * @member {module:model/GetTransactionRequestDetailsRI.BlockchainEnum} blockchain
 */
GetTransactionRequestDetailsRI.prototype['blockchain'] = undefined;

/**
 * Defines the priority for the fee, if it is \"slow\", \"standard\" or \"fast\".
 * @member {module:model/GetTransactionRequestDetailsRI.FeePriorityEnum} feePriority
 */
GetTransactionRequestDetailsRI.prototype['feePriority'] = undefined;

/**
 * Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"ropsten\" are test networks.
 * @member {module:model/GetTransactionRequestDetailsRI.NetworkEnum} network
 */
GetTransactionRequestDetailsRI.prototype['network'] = undefined;

/**
 * Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
 * @member {Array.<module:model/GetTransactionRequestDetailsRIRecipientsInner>} recipients
 */
GetTransactionRequestDetailsRI.prototype['recipients'] = undefined;

/**
 * Defines the total transaction amount.
 * @member {String} totalTransactionAmount
 */
GetTransactionRequestDetailsRI.prototype['totalTransactionAmount'] = undefined;

/**
 * Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
 * @member {String} transactionId
 */
GetTransactionRequestDetailsRI.prototype['transactionId'] = undefined;

/**
 * Defines the status of the transaction request, e.g. pending.
 * @member {module:model/GetTransactionRequestDetailsRI.TransactionRequestStatusEnum} transactionRequestStatus
 */
GetTransactionRequestDetailsRI.prototype['transactionRequestStatus'] = undefined;

/**
 * Defines the transaction type, if it is for coins or tokens.
 * @member {module:model/GetTransactionRequestDetailsRI.TransactionTypeEnum} transactionType
 */
GetTransactionRequestDetailsRI.prototype['transactionType'] = undefined;

/**
 * Defines the unit of the amount.
 * @member {String} unit
 */
GetTransactionRequestDetailsRI.prototype['unit'] = undefined;

/**
 * Defines the unique ID of the Wallet.
 * @member {String} walletId
 */
GetTransactionRequestDetailsRI.prototype['walletId'] = undefined;





/**
 * Allowed values for the <code>blockchain</code> property.
 * @enum {String}
 * @readonly
 */
GetTransactionRequestDetailsRI['BlockchainEnum'] = {

    /**
     * value: "bitcoin"
     * @const
     */
    "bitcoin": "bitcoin",

    /**
     * value: "bitcoin-cash"
     * @const
     */
    "bitcoin-cash": "bitcoin-cash",

    /**
     * value: "litecoin"
     * @const
     */
    "litecoin": "litecoin",

    /**
     * value: "dogecoin"
     * @const
     */
    "dogecoin": "dogecoin",

    /**
     * value: "dash"
     * @const
     */
    "dash": "dash",

    /**
     * value: "ethereum"
     * @const
     */
    "ethereum": "ethereum",

    /**
     * value: "ethereum-classic"
     * @const
     */
    "ethereum-classic": "ethereum-classic",

    /**
     * value: "xrp"
     * @const
     */
    "xrp": "xrp",

    /**
     * value: "zcash"
     * @const
     */
    "zcash": "zcash"
};


/**
 * Allowed values for the <code>feePriority</code> property.
 * @enum {String}
 * @readonly
 */
GetTransactionRequestDetailsRI['FeePriorityEnum'] = {

    /**
     * value: "slow"
     * @const
     */
    "slow": "slow",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "fast"
     * @const
     */
    "fast": "fast"
};


/**
 * Allowed values for the <code>network</code> property.
 * @enum {String}
 * @readonly
 */
GetTransactionRequestDetailsRI['NetworkEnum'] = {

    /**
     * value: "mainnet"
     * @const
     */
    "mainnet": "mainnet",

    /**
     * value: "testnet"
     * @const
     */
    "testnet": "testnet",

    /**
     * value: "ropsten"
     * @const
     */
    "ropsten": "ropsten",

    /**
     * value: "mordor"
     * @const
     */
    "mordor": "mordor"
};


/**
 * Allowed values for the <code>transactionRequestStatus</code> property.
 * @enum {String}
 * @readonly
 */
GetTransactionRequestDetailsRI['TransactionRequestStatusEnum'] = {

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "await-approval"
     * @const
     */
    "await-approval": "await-approval",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "prepared"
     * @const
     */
    "prepared": "prepared",

    /**
     * value: "signed"
     * @const
     */
    "signed": "signed",

    /**
     * value: "broadcasted"
     * @const
     */
    "broadcasted": "broadcasted",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "mined"
     * @const
     */
    "mined": "mined"
};


/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
GetTransactionRequestDetailsRI['TransactionTypeEnum'] = {

    /**
     * value: "coin"
     * @const
     */
    "coin": "coin",

    /**
     * value: "token"
     * @const
     */
    "token": "token"
};



export default GetTransactionRequestDetailsRI;

