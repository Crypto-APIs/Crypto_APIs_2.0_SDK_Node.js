/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX';
import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSXFee from './PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSXFee';

/**
 * The PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS model module.
 * @module model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS
 * @version 1.11.0
 */
class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS {
    /**
     * Constructs a new <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS</code>.
     * @alias module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS
     * @param {(module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX)} instance The actual instance to initialize PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE.validateJSON(instance); // throw an exception if no match
                // create PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE from JS object
                this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE
            errorMessages.push("Failed to construct PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE: " + err)
        }

        try {
            if (typeof instance === "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC from JS object
                this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC
            errorMessages.push("Failed to construct PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC: " + err)
        }

        try {
            if (typeof instance === "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC.validateJSON(instance); // throw an exception if no match
                // create PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC from JS object
                this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC
            errorMessages.push("Failed to construct PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC: " + err)
        }

        try {
            if (typeof instance === "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.validateJSON(instance); // throw an exception if no match
                // create PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST from JS object
                this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST
            errorMessages.push("Failed to construct PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST: " + err)
        }

        try {
            if (typeof instance === "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX.validateJSON(instance); // throw an exception if no match
                // create PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX from JS object
                this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX
            errorMessages.push("Failed to construct PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS` with oneOf schemas PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS` with oneOf schemas PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST, PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS} obj Optional instance to populate.
     * @return {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS} The populated <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX</code>.
     * @return {(module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST</code>, <code>PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX</code>.
     * @param {(module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST|module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS} An instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.
     */
    static fromJSON = function(json_string){
        return PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Representation of the data in hex value
 * @member {String} dataHex
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['dataHex'] = undefined;

/**
 * Representation of the derivation index of the xpub address
 * @member {Number} derivationIndex
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['derivationIndex'] = undefined;

/**
 * @member {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSXFee} fee
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['fee'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {String} nonce
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['nonce'] = undefined;

/**
 * Representation of the transaction type
 * @member {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.TransactionTypeEnum} transactionType
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['transactionType'] = undefined;

/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['unit'] = undefined;

/**
 * String representation of the data
 * @member {String} data
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['data'] = undefined;

/**
 * Rrepresentation of the expiration value
 * @member {Number} expiration
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['expiration'] = undefined;

/**
 * @member {module:model/PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSTRawData} rawData
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['rawData'] = undefined;

/**
 * Representation of the raw data in hex format
 * @member {String} rawDataHex
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['rawDataHex'] = undefined;

/**
 * Rrepresentation of the recipients' address
 * @member {String} recipient
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['recipient'] = undefined;

/**
 * Representation of the block bytes
 * @member {String} refBlockBytes
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['refBlockBytes'] = undefined;

/**
 * Representation of the block hash refference
 * @member {String} refBlockHash
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['refBlockHash'] = undefined;

/**
 * Representation of the sender
 * @member {String} sender
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['sender'] = undefined;

/**
 * Representation of the timestamp
 * @member {Number} timestamp
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['timestamp'] = undefined;

/**
 * Represents the reference transaction identifier.
 * @member {String} transactionId
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['transactionId'] = undefined;

/**
 * Representation of the transfer type.
 * @member {String} type
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['type'] = undefined;

/**
 * Representation of the URL
 * @member {String} typeUrl
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['typeUrl'] = undefined;

/**
 * Representation of the address visibility
 * @member {Boolean} visible
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['visible'] = undefined;

/**
 * Representation of the public key.
 * @member {String} publicKey
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['publicKey'] = undefined;

/**
 * Representation of the sequence
 * @member {String} sequence
 */
PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.prototype['sequence'] = undefined;


PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS.OneOf = ["PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSBSC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEC", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBST", "PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSX"];

export default PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBS;

