/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressTokensTransactionConfirmedEachConfirmationBep20 from './AddressTokensTransactionConfirmedEachConfirmationBep20';
import AddressTokensTransactionConfirmedEachConfirmationErc20 from './AddressTokensTransactionConfirmedEachConfirmationErc20';
import AddressTokensTransactionConfirmedEachConfirmationErc721 from './AddressTokensTransactionConfirmedEachConfirmationErc721';
import AddressTokensTransactionConfirmedEachConfirmationOmni from './AddressTokensTransactionConfirmedEachConfirmationOmni';

/**
 * The AddressTokensTransactionConfirmedEachConfirmationToken model module.
 * @module model/AddressTokensTransactionConfirmedEachConfirmationToken
 * @version 1.11.0
 */
class AddressTokensTransactionConfirmedEachConfirmationToken {
    /**
     * Constructs a new <code>AddressTokensTransactionConfirmedEachConfirmationToken</code>.
     * @alias module:model/AddressTokensTransactionConfirmedEachConfirmationToken
     * @param {(module:model/AddressTokensTransactionConfirmedEachConfirmationBep20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc721|module:model/AddressTokensTransactionConfirmedEachConfirmationOmni)} instance The actual instance to initialize AddressTokensTransactionConfirmedEachConfirmationToken.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AddressTokensTransactionConfirmedEachConfirmationErc20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedEachConfirmationErc20.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedEachConfirmationErc20 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedEachConfirmationErc20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedEachConfirmationErc20
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedEachConfirmationErc20: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedEachConfirmationErc721") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedEachConfirmationErc721.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedEachConfirmationErc721 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedEachConfirmationErc721.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedEachConfirmationErc721
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedEachConfirmationErc721: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedEachConfirmationOmni") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedEachConfirmationOmni.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedEachConfirmationOmni from JS object
                this.actualInstance = AddressTokensTransactionConfirmedEachConfirmationOmni.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedEachConfirmationOmni
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedEachConfirmationOmni: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionConfirmedEachConfirmationBep20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionConfirmedEachConfirmationBep20.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionConfirmedEachConfirmationBep20 from JS object
                this.actualInstance = AddressTokensTransactionConfirmedEachConfirmationBep20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionConfirmedEachConfirmationBep20
            errorMessages.push("Failed to construct AddressTokensTransactionConfirmedEachConfirmationBep20: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddressTokensTransactionConfirmedEachConfirmationToken` with oneOf schemas AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddressTokensTransactionConfirmedEachConfirmationToken` with oneOf schemas AddressTokensTransactionConfirmedEachConfirmationBep20, AddressTokensTransactionConfirmedEachConfirmationErc20, AddressTokensTransactionConfirmedEachConfirmationErc721, AddressTokensTransactionConfirmedEachConfirmationOmni. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddressTokensTransactionConfirmedEachConfirmationToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressTokensTransactionConfirmedEachConfirmationToken} obj Optional instance to populate.
     * @return {module:model/AddressTokensTransactionConfirmedEachConfirmationToken} The populated <code>AddressTokensTransactionConfirmedEachConfirmationToken</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddressTokensTransactionConfirmedEachConfirmationToken(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddressTokensTransactionConfirmedEachConfirmationBep20</code>, <code>AddressTokensTransactionConfirmedEachConfirmationErc20</code>, <code>AddressTokensTransactionConfirmedEachConfirmationErc721</code>, <code>AddressTokensTransactionConfirmedEachConfirmationOmni</code>.
     * @return {(module:model/AddressTokensTransactionConfirmedEachConfirmationBep20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc721|module:model/AddressTokensTransactionConfirmedEachConfirmationOmni)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddressTokensTransactionConfirmedEachConfirmationBep20</code>, <code>AddressTokensTransactionConfirmedEachConfirmationErc20</code>, <code>AddressTokensTransactionConfirmedEachConfirmationErc721</code>, <code>AddressTokensTransactionConfirmedEachConfirmationOmni</code>.
     * @param {(module:model/AddressTokensTransactionConfirmedEachConfirmationBep20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc20|module:model/AddressTokensTransactionConfirmedEachConfirmationErc721|module:model/AddressTokensTransactionConfirmedEachConfirmationOmni)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddressTokensTransactionConfirmedEachConfirmationToken.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddressTokensTransactionConfirmedEachConfirmationToken from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddressTokensTransactionConfirmedEachConfirmationToken} An instance of AddressTokensTransactionConfirmedEachConfirmationToken.
     */
    static fromJSON = function(json_string){
        return AddressTokensTransactionConfirmedEachConfirmationToken.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Specifies the name of the token.
 * @member {String} name
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['name'] = undefined;

/**
 * Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
 * @member {String} symbol
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['symbol'] = undefined;

/**
 * Defines how many decimals can be used to break the token.
 * @member {String} decimals
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['decimals'] = undefined;

/**
 * Defines the amount of tokens sent with the confirmed transaction.
 * @member {String} amount
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['amount'] = undefined;

/**
 * Defines the address of the contract.
 * @member {String} contractAddress
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['contractAddress'] = undefined;

/**
 * Specifies the ID of the token.
 * @member {String} tokenId
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['tokenId'] = undefined;

/**
 * Defines the ID of the property for Omni Layer.
 * @member {String} propertyId
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['propertyId'] = undefined;

/**
 * Defines the type of the transaction.
 * @member {String} transactionType
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['transactionType'] = undefined;

/**
 * The transaction ID used to create the token.
 * @member {String} createdByTransactionId
 */
AddressTokensTransactionConfirmedEachConfirmationToken.prototype['createdByTransactionId'] = undefined;


AddressTokensTransactionConfirmedEachConfirmationToken.OneOf = ["AddressTokensTransactionConfirmedEachConfirmationBep20", "AddressTokensTransactionConfirmedEachConfirmationErc20", "AddressTokensTransactionConfirmedEachConfirmationErc721", "AddressTokensTransactionConfirmedEachConfirmationOmni"];

export default AddressTokensTransactionConfirmedEachConfirmationToken;

