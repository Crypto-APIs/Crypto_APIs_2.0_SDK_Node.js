/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateFungibleTokensTransactionRequestFromAddressRISE from './CreateFungibleTokensTransactionRequestFromAddressRISE';

/**
 * The CreateFungibleTokensTransactionRequestFromAddressRIS model module.
 * @module model/CreateFungibleTokensTransactionRequestFromAddressRIS
 * @version 1.11.0
 */
class CreateFungibleTokensTransactionRequestFromAddressRIS {
    /**
     * Constructs a new <code>CreateFungibleTokensTransactionRequestFromAddressRIS</code>.
     * Represents the specific token data which depends on its type - if it is a Coin or Token.
     * @alias module:model/CreateFungibleTokensTransactionRequestFromAddressRIS
     * @param {(module:model/CreateFungibleTokensTransactionRequestFromAddressRISE)} instance The actual instance to initialize CreateFungibleTokensTransactionRequestFromAddressRIS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateFungibleTokensTransactionRequestFromAddressRISE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateFungibleTokensTransactionRequestFromAddressRISE.validateJSON(instance); // throw an exception if no match
                // create CreateFungibleTokensTransactionRequestFromAddressRISE from JS object
                this.actualInstance = CreateFungibleTokensTransactionRequestFromAddressRISE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateFungibleTokensTransactionRequestFromAddressRISE
            errorMessages.push("Failed to construct CreateFungibleTokensTransactionRequestFromAddressRISE: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateFungibleTokensTransactionRequestFromAddressRIS` with oneOf schemas CreateFungibleTokensTransactionRequestFromAddressRISE. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateFungibleTokensTransactionRequestFromAddressRIS` with oneOf schemas CreateFungibleTokensTransactionRequestFromAddressRISE. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateFungibleTokensTransactionRequestFromAddressRIS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFungibleTokensTransactionRequestFromAddressRIS} obj Optional instance to populate.
     * @return {module:model/CreateFungibleTokensTransactionRequestFromAddressRIS} The populated <code>CreateFungibleTokensTransactionRequestFromAddressRIS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateFungibleTokensTransactionRequestFromAddressRIS(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateFungibleTokensTransactionRequestFromAddressRISE</code>.
     * @return {(module:model/CreateFungibleTokensTransactionRequestFromAddressRISE)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateFungibleTokensTransactionRequestFromAddressRISE</code>.
     * @param {(module:model/CreateFungibleTokensTransactionRequestFromAddressRISE)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateFungibleTokensTransactionRequestFromAddressRIS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateFungibleTokensTransactionRequestFromAddressRIS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateFungibleTokensTransactionRequestFromAddressRIS} An instance of CreateFungibleTokensTransactionRequestFromAddressRIS.
     */
    static fromJSON = function(json_string){
        return CreateFungibleTokensTransactionRequestFromAddressRIS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Defines the contract address in the blockchain for an ERC20 token.
 * @member {String} contractAddress
 */
CreateFungibleTokensTransactionRequestFromAddressRIS.prototype['contractAddress'] = undefined;


CreateFungibleTokensTransactionRequestFromAddressRIS.OneOf = ["CreateFungibleTokensTransactionRequestFromAddressRISE"];

export default CreateFungibleTokensTransactionRequestFromAddressRIS;

