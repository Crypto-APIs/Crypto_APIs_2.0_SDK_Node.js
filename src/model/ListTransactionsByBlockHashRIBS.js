/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner';
import GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner from './GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner';
import GetTransactionDetailsByTransactionIDRIBSZVoutInner from './GetTransactionDetailsByTransactionIDRIBSZVoutInner';
import ListTransactionsByBlockHashRIBSB from './ListTransactionsByBlockHashRIBSB';
import ListTransactionsByBlockHashRIBSBC from './ListTransactionsByBlockHashRIBSBC';
import ListTransactionsByBlockHashRIBSBSC from './ListTransactionsByBlockHashRIBSBSC';
import ListTransactionsByBlockHashRIBSBSCGasPrice from './ListTransactionsByBlockHashRIBSBSCGasPrice';
import ListTransactionsByBlockHashRIBSD from './ListTransactionsByBlockHashRIBSD';
import ListTransactionsByBlockHashRIBSD2 from './ListTransactionsByBlockHashRIBSD2';
import ListTransactionsByBlockHashRIBSE from './ListTransactionsByBlockHashRIBSE';
import ListTransactionsByBlockHashRIBSEC from './ListTransactionsByBlockHashRIBSEC';
import ListTransactionsByBlockHashRIBSL from './ListTransactionsByBlockHashRIBSL';
import ListTransactionsByBlockHashRIBSZ from './ListTransactionsByBlockHashRIBSZ';
import ListTransactionsByBlockHashRIBSZVJoinSplitInner from './ListTransactionsByBlockHashRIBSZVJoinSplitInner';
import ListTransactionsByBlockHashRIBSZVinInner from './ListTransactionsByBlockHashRIBSZVinInner';

/**
 * The ListTransactionsByBlockHashRIBS model module.
 * @module model/ListTransactionsByBlockHashRIBS
 * @version 1.11.0
 */
class ListTransactionsByBlockHashRIBS {
    /**
     * Constructs a new <code>ListTransactionsByBlockHashRIBS</code>.
     * @alias module:model/ListTransactionsByBlockHashRIBS
     * @param {(module:model/ListTransactionsByBlockHashRIBSB|module:model/ListTransactionsByBlockHashRIBSBC|module:model/ListTransactionsByBlockHashRIBSBSC|module:model/ListTransactionsByBlockHashRIBSD|module:model/ListTransactionsByBlockHashRIBSD2|module:model/ListTransactionsByBlockHashRIBSE|module:model/ListTransactionsByBlockHashRIBSEC|module:model/ListTransactionsByBlockHashRIBSL|module:model/ListTransactionsByBlockHashRIBSZ)} instance The actual instance to initialize ListTransactionsByBlockHashRIBS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSB") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSB.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSB from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSB.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSB
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSB: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSBC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSBC.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSBC from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSBC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSBC
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSBC: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSL") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSL.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSL from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSL.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSL
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSL: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSD") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSD.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSD from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSD.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSD
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSD: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSD2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSD2.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSD2 from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSD2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSD2
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSD2: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSE") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSE.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSE from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSE.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSE
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSE: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSEC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSEC.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSEC from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSEC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSEC
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSEC: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSBSC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSBSC.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSBSC from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSBSC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSBSC
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSBSC: " + err)
        }

        try {
            if (typeof instance === "ListTransactionsByBlockHashRIBSZ") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ListTransactionsByBlockHashRIBSZ.validateJSON(instance); // throw an exception if no match
                // create ListTransactionsByBlockHashRIBSZ from JS object
                this.actualInstance = ListTransactionsByBlockHashRIBSZ.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ListTransactionsByBlockHashRIBSZ
            errorMessages.push("Failed to construct ListTransactionsByBlockHashRIBSZ: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ListTransactionsByBlockHashRIBS` with oneOf schemas ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ListTransactionsByBlockHashRIBS` with oneOf schemas ListTransactionsByBlockHashRIBSB, ListTransactionsByBlockHashRIBSBC, ListTransactionsByBlockHashRIBSBSC, ListTransactionsByBlockHashRIBSD, ListTransactionsByBlockHashRIBSD2, ListTransactionsByBlockHashRIBSE, ListTransactionsByBlockHashRIBSEC, ListTransactionsByBlockHashRIBSL, ListTransactionsByBlockHashRIBSZ. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ListTransactionsByBlockHashRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListTransactionsByBlockHashRIBS} obj Optional instance to populate.
     * @return {module:model/ListTransactionsByBlockHashRIBS} The populated <code>ListTransactionsByBlockHashRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ListTransactionsByBlockHashRIBS(data);
    }

    /**
     * Gets the actual instance, which can be <code>ListTransactionsByBlockHashRIBSB</code>, <code>ListTransactionsByBlockHashRIBSBC</code>, <code>ListTransactionsByBlockHashRIBSBSC</code>, <code>ListTransactionsByBlockHashRIBSD</code>, <code>ListTransactionsByBlockHashRIBSD2</code>, <code>ListTransactionsByBlockHashRIBSE</code>, <code>ListTransactionsByBlockHashRIBSEC</code>, <code>ListTransactionsByBlockHashRIBSL</code>, <code>ListTransactionsByBlockHashRIBSZ</code>.
     * @return {(module:model/ListTransactionsByBlockHashRIBSB|module:model/ListTransactionsByBlockHashRIBSBC|module:model/ListTransactionsByBlockHashRIBSBSC|module:model/ListTransactionsByBlockHashRIBSD|module:model/ListTransactionsByBlockHashRIBSD2|module:model/ListTransactionsByBlockHashRIBSE|module:model/ListTransactionsByBlockHashRIBSEC|module:model/ListTransactionsByBlockHashRIBSL|module:model/ListTransactionsByBlockHashRIBSZ)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ListTransactionsByBlockHashRIBSB</code>, <code>ListTransactionsByBlockHashRIBSBC</code>, <code>ListTransactionsByBlockHashRIBSBSC</code>, <code>ListTransactionsByBlockHashRIBSD</code>, <code>ListTransactionsByBlockHashRIBSD2</code>, <code>ListTransactionsByBlockHashRIBSE</code>, <code>ListTransactionsByBlockHashRIBSEC</code>, <code>ListTransactionsByBlockHashRIBSL</code>, <code>ListTransactionsByBlockHashRIBSZ</code>.
     * @param {(module:model/ListTransactionsByBlockHashRIBSB|module:model/ListTransactionsByBlockHashRIBSBC|module:model/ListTransactionsByBlockHashRIBSBSC|module:model/ListTransactionsByBlockHashRIBSD|module:model/ListTransactionsByBlockHashRIBSD2|module:model/ListTransactionsByBlockHashRIBSE|module:model/ListTransactionsByBlockHashRIBSEC|module:model/ListTransactionsByBlockHashRIBSL|module:model/ListTransactionsByBlockHashRIBSZ)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ListTransactionsByBlockHashRIBS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ListTransactionsByBlockHashRIBS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ListTransactionsByBlockHashRIBS} An instance of ListTransactionsByBlockHashRIBS.
     */
    static fromJSON = function(json_string){
        return ListTransactionsByBlockHashRIBS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the time at which a particular transaction can be added to the blockchain.
 * @member {Number} locktime
 */
ListTransactionsByBlockHashRIBS.prototype['locktime'] = undefined;

/**
 * Represents the total size of this transaction.
 * @member {Number} size
 */
ListTransactionsByBlockHashRIBS.prototype['size'] = undefined;

/**
 * Represents the virtual size of this transaction.
 * @member {Number} vSize
 */
ListTransactionsByBlockHashRIBS.prototype['vSize'] = undefined;

/**
 * Numeric representation of the transaction Represents the transaction version number.
 * @member {Number} version
 */
ListTransactionsByBlockHashRIBS.prototype['version'] = undefined;

/**
 * Object Array representation of transaction inputs
 * @member {Array.<module:model/ListTransactionsByBlockHashRIBSZVinInner>} vin
 */
ListTransactionsByBlockHashRIBS.prototype['vin'] = undefined;

/**
 * Object Array representation of transaction outputs
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVoutInner>} vout
 */
ListTransactionsByBlockHashRIBS.prototype['vout'] = undefined;

/**
 * Represents the specific transaction contract.
 * @member {String} contract
 */
ListTransactionsByBlockHashRIBS.prototype['contract'] = undefined;

/**
 * Represents the amount of gas used by this specific transaction alone.
 * @member {String} gasLimit
 */
ListTransactionsByBlockHashRIBS.prototype['gasLimit'] = undefined;

/**
 * @member {module:model/ListTransactionsByBlockHashRIBSBSCGasPrice} gasPrice
 */
ListTransactionsByBlockHashRIBS.prototype['gasPrice'] = undefined;

/**
 * Represents the exact unit of gas that was used for the transaction.
 * @member {String} gasUsed
 */
ListTransactionsByBlockHashRIBS.prototype['gasUsed'] = undefined;

/**
 * Represents additional information that is required for the transaction.
 * @member {String} inputData
 */
ListTransactionsByBlockHashRIBS.prototype['inputData'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {Number} nonce
 */
ListTransactionsByBlockHashRIBS.prototype['nonce'] = undefined;

/**
 * Represents the status of this transaction
 * @member {String} transactionStatus
 */
ListTransactionsByBlockHashRIBS.prototype['transactionStatus'] = undefined;

/**
 * It is used to enforce balance of Spend and Output transfers, in order to prevent their replay across transactions.
 * @member {String} bindingSig
 */
ListTransactionsByBlockHashRIBS.prototype['bindingSig'] = undefined;

/**
 * Represents a block height after which the transaction will expire.
 * @member {Number} expiryHeight
 */
ListTransactionsByBlockHashRIBS.prototype['expiryHeight'] = undefined;

/**
 * Represents an encoding of a JoinSplitSig public validating key.
 * @member {String} joinSplitPubKey
 */
ListTransactionsByBlockHashRIBS.prototype['joinSplitPubKey'] = undefined;

/**
 * Is used to sign transactions that contain at least one JoinSplit description.
 * @member {String} joinSplitSig
 */
ListTransactionsByBlockHashRIBS.prototype['joinSplitSig'] = undefined;

/**
 * \"Overwinter\" is the network upgrade for the Zcash blockchain.
 * @member {Boolean} overwintered
 */
ListTransactionsByBlockHashRIBS.prototype['overwintered'] = undefined;

/**
 * Represents a sequence of JoinSplit descriptions using BCTV14 proofs.
 * @member {Array.<module:model/ListTransactionsByBlockHashRIBSZVJoinSplitInner>} vJoinSplit
 */
ListTransactionsByBlockHashRIBS.prototype['vJoinSplit'] = undefined;

/**
 * Object Array representation of transaction output descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedOutputInner>} vShieldedOutput
 */
ListTransactionsByBlockHashRIBS.prototype['vShieldedOutput'] = undefined;

/**
 * Object Array representation of transaction spend descriptions
 * @member {Array.<module:model/GetTransactionDetailsByTransactionIDRIBSZVShieldedSpendInner>} vShieldedSpend
 */
ListTransactionsByBlockHashRIBS.prototype['vShieldedSpend'] = undefined;

/**
 * Defines the transaction value balance.
 * @member {String} valueBalance
 */
ListTransactionsByBlockHashRIBS.prototype['valueBalance'] = undefined;

/**
 * Represents the transaction version group ID.
 * @member {String} versionGroupId
 */
ListTransactionsByBlockHashRIBS.prototype['versionGroupId'] = undefined;


ListTransactionsByBlockHashRIBS.OneOf = ["ListTransactionsByBlockHashRIBSB", "ListTransactionsByBlockHashRIBSBC", "ListTransactionsByBlockHashRIBSBSC", "ListTransactionsByBlockHashRIBSD", "ListTransactionsByBlockHashRIBSD2", "ListTransactionsByBlockHashRIBSE", "ListTransactionsByBlockHashRIBSEC", "ListTransactionsByBlockHashRIBSL", "ListTransactionsByBlockHashRIBSZ"];

export default ListTransactionsByBlockHashRIBS;

