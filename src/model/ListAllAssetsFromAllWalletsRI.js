/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListAllAssetsFromAllWalletsRICoinsInner from './ListAllAssetsFromAllWalletsRICoinsInner';
import ListAllAssetsFromAllWalletsRIFungibleTokensInner from './ListAllAssetsFromAllWalletsRIFungibleTokensInner';
import ListAllAssetsFromAllWalletsRINonFungibleTokensInner from './ListAllAssetsFromAllWalletsRINonFungibleTokensInner';

/**
 * The ListAllAssetsFromAllWalletsRI model module.
 * @module model/ListAllAssetsFromAllWalletsRI
 * @version 1.11.0
 */
class ListAllAssetsFromAllWalletsRI {
    /**
     * Constructs a new <code>ListAllAssetsFromAllWalletsRI</code>.
     * @alias module:model/ListAllAssetsFromAllWalletsRI
     * @param coins {Array.<module:model/ListAllAssetsFromAllWalletsRICoinsInner>} 
     * @param fungibleTokens {Array.<module:model/ListAllAssetsFromAllWalletsRIFungibleTokensInner>} Represents fungible tokens'es detailed information
     * @param nonFungibleTokens {Array.<module:model/ListAllAssetsFromAllWalletsRINonFungibleTokensInner>} Represents non-fungible tokens'es detailed information.
     * @param walletId {String} Defines the unique ID of the Wallet.
     * @param walletName {String} Represents the name of the wallet.
     */
    constructor(coins, fungibleTokens, nonFungibleTokens, walletId, walletName) { 
        
        ListAllAssetsFromAllWalletsRI.initialize(this, coins, fungibleTokens, nonFungibleTokens, walletId, walletName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, coins, fungibleTokens, nonFungibleTokens, walletId, walletName) { 
        obj['coins'] = coins;
        obj['fungibleTokens'] = fungibleTokens;
        obj['nonFungibleTokens'] = nonFungibleTokens;
        obj['walletId'] = walletId;
        obj['walletName'] = walletName;
    }

    /**
     * Constructs a <code>ListAllAssetsFromAllWalletsRI</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListAllAssetsFromAllWalletsRI} obj Optional instance to populate.
     * @return {module:model/ListAllAssetsFromAllWalletsRI} The populated <code>ListAllAssetsFromAllWalletsRI</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListAllAssetsFromAllWalletsRI();

            if (data.hasOwnProperty('coins')) {
                obj['coins'] = ApiClient.convertToType(data['coins'], [ListAllAssetsFromAllWalletsRICoinsInner]);
            }
            if (data.hasOwnProperty('fungibleTokens')) {
                obj['fungibleTokens'] = ApiClient.convertToType(data['fungibleTokens'], [ListAllAssetsFromAllWalletsRIFungibleTokensInner]);
            }
            if (data.hasOwnProperty('nonFungibleTokens')) {
                obj['nonFungibleTokens'] = ApiClient.convertToType(data['nonFungibleTokens'], [ListAllAssetsFromAllWalletsRINonFungibleTokensInner]);
            }
            if (data.hasOwnProperty('walletId')) {
                obj['walletId'] = ApiClient.convertToType(data['walletId'], 'String');
            }
            if (data.hasOwnProperty('walletName')) {
                obj['walletName'] = ApiClient.convertToType(data['walletName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListAllAssetsFromAllWalletsRI</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListAllAssetsFromAllWalletsRI</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListAllAssetsFromAllWalletsRI.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['coins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coins'])) {
                throw new Error("Expected the field `coins` to be an array in the JSON data but got " + data['coins']);
            }
            // validate the optional field `coins` (array)
            for (const item of data['coins']) {
                ListAllAssetsFromAllWalletsRICoinsInner.validateJsonObject(item);
            };
        }
        if (data['fungibleTokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fungibleTokens'])) {
                throw new Error("Expected the field `fungibleTokens` to be an array in the JSON data but got " + data['fungibleTokens']);
            }
            // validate the optional field `fungibleTokens` (array)
            for (const item of data['fungibleTokens']) {
                ListAllAssetsFromAllWalletsRIFungibleTokensInner.validateJsonObject(item);
            };
        }
        if (data['nonFungibleTokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nonFungibleTokens'])) {
                throw new Error("Expected the field `nonFungibleTokens` to be an array in the JSON data but got " + data['nonFungibleTokens']);
            }
            // validate the optional field `nonFungibleTokens` (array)
            for (const item of data['nonFungibleTokens']) {
                ListAllAssetsFromAllWalletsRINonFungibleTokensInner.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['walletId'] && !(typeof data['walletId'] === 'string' || data['walletId'] instanceof String)) {
            throw new Error("Expected the field `walletId` to be a primitive type in the JSON string but got " + data['walletId']);
        }
        // ensure the json data is a string
        if (data['walletName'] && !(typeof data['walletName'] === 'string' || data['walletName'] instanceof String)) {
            throw new Error("Expected the field `walletName` to be a primitive type in the JSON string but got " + data['walletName']);
        }

        return true;
    }


}

ListAllAssetsFromAllWalletsRI.RequiredProperties = ["coins", "fungibleTokens", "nonFungibleTokens", "walletId", "walletName"];

/**
 * @member {Array.<module:model/ListAllAssetsFromAllWalletsRICoinsInner>} coins
 */
ListAllAssetsFromAllWalletsRI.prototype['coins'] = undefined;

/**
 * Represents fungible tokens'es detailed information
 * @member {Array.<module:model/ListAllAssetsFromAllWalletsRIFungibleTokensInner>} fungibleTokens
 */
ListAllAssetsFromAllWalletsRI.prototype['fungibleTokens'] = undefined;

/**
 * Represents non-fungible tokens'es detailed information.
 * @member {Array.<module:model/ListAllAssetsFromAllWalletsRINonFungibleTokensInner>} nonFungibleTokens
 */
ListAllAssetsFromAllWalletsRI.prototype['nonFungibleTokens'] = undefined;

/**
 * Defines the unique ID of the Wallet.
 * @member {String} walletId
 */
ListAllAssetsFromAllWalletsRI.prototype['walletId'] = undefined;

/**
 * Represents the name of the wallet.
 * @member {String} walletName
 */
ListAllAssetsFromAllWalletsRI.prototype['walletName'] = undefined;






export default ListAllAssetsFromAllWalletsRI;

