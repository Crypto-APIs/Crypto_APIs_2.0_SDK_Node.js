/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressTokensTransactionUnconfirmedErc20 from './AddressTokensTransactionUnconfirmedErc20';
import AddressTokensTransactionUnconfirmedErc721 from './AddressTokensTransactionUnconfirmedErc721';
import AddressTokensTransactionUnconfirmedOmni from './AddressTokensTransactionUnconfirmedOmni';

/**
 * The AddressTokensTransactionUnconfirmedToken model module.
 * @module model/AddressTokensTransactionUnconfirmedToken
 * @version 1.11.0
 */
class AddressTokensTransactionUnconfirmedToken {
    /**
     * Constructs a new <code>AddressTokensTransactionUnconfirmedToken</code>.
     * @alias module:model/AddressTokensTransactionUnconfirmedToken
     * @param {(module:model/AddressTokensTransactionUnconfirmedErc20|module:model/AddressTokensTransactionUnconfirmedErc721|module:model/AddressTokensTransactionUnconfirmedOmni)} instance The actual instance to initialize AddressTokensTransactionUnconfirmedToken.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AddressTokensTransactionUnconfirmedErc20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionUnconfirmedErc20.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionUnconfirmedErc20 from JS object
                this.actualInstance = AddressTokensTransactionUnconfirmedErc20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionUnconfirmedErc20
            errorMessages.push("Failed to construct AddressTokensTransactionUnconfirmedErc20: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionUnconfirmedErc721") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionUnconfirmedErc721.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionUnconfirmedErc721 from JS object
                this.actualInstance = AddressTokensTransactionUnconfirmedErc721.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionUnconfirmedErc721
            errorMessages.push("Failed to construct AddressTokensTransactionUnconfirmedErc721: " + err)
        }

        try {
            if (typeof instance === "AddressTokensTransactionUnconfirmedOmni") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddressTokensTransactionUnconfirmedOmni.validateJSON(instance); // throw an exception if no match
                // create AddressTokensTransactionUnconfirmedOmni from JS object
                this.actualInstance = AddressTokensTransactionUnconfirmedOmni.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressTokensTransactionUnconfirmedOmni
            errorMessages.push("Failed to construct AddressTokensTransactionUnconfirmedOmni: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddressTokensTransactionUnconfirmedToken` with oneOf schemas AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddressTokensTransactionUnconfirmedToken` with oneOf schemas AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddressTokensTransactionUnconfirmedToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressTokensTransactionUnconfirmedToken} obj Optional instance to populate.
     * @return {module:model/AddressTokensTransactionUnconfirmedToken} The populated <code>AddressTokensTransactionUnconfirmedToken</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddressTokensTransactionUnconfirmedToken(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddressTokensTransactionUnconfirmedErc20</code>, <code>AddressTokensTransactionUnconfirmedErc721</code>, <code>AddressTokensTransactionUnconfirmedOmni</code>.
     * @return {(module:model/AddressTokensTransactionUnconfirmedErc20|module:model/AddressTokensTransactionUnconfirmedErc721|module:model/AddressTokensTransactionUnconfirmedOmni)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddressTokensTransactionUnconfirmedErc20</code>, <code>AddressTokensTransactionUnconfirmedErc721</code>, <code>AddressTokensTransactionUnconfirmedOmni</code>.
     * @param {(module:model/AddressTokensTransactionUnconfirmedErc20|module:model/AddressTokensTransactionUnconfirmedErc721|module:model/AddressTokensTransactionUnconfirmedOmni)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddressTokensTransactionUnconfirmedToken.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddressTokensTransactionUnconfirmedToken from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddressTokensTransactionUnconfirmedToken} An instance of AddressTokensTransactionUnconfirmedToken.
     */
    static fromJSON = function(json_string){
        return AddressTokensTransactionUnconfirmedToken.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Specifies the name of the token.
 * @member {String} name
 */
AddressTokensTransactionUnconfirmedToken.prototype['name'] = undefined;

/**
 * Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
 * @member {String} symbol
 */
AddressTokensTransactionUnconfirmedToken.prototype['symbol'] = undefined;

/**
 * Defines how many decimals can be used to break the token.
 * @member {String} decimals
 */
AddressTokensTransactionUnconfirmedToken.prototype['decimals'] = undefined;

/**
 * Defines the amount of tokens sent with the transaction that is pending confirmation.
 * @member {String} amount
 */
AddressTokensTransactionUnconfirmedToken.prototype['amount'] = undefined;

/**
 * Specifies the address of the contract.
 * @member {String} contractAddress
 */
AddressTokensTransactionUnconfirmedToken.prototype['contractAddress'] = undefined;

/**
 * Specifies the unique ID of the token.
 * @member {String} tokenId
 */
AddressTokensTransactionUnconfirmedToken.prototype['tokenId'] = undefined;

/**
 * Defines the ID of the property for Omni Layer.
 * @member {String} propertyId
 */
AddressTokensTransactionUnconfirmedToken.prototype['propertyId'] = undefined;

/**
 * Defines the type of the transaction made.
 * @member {String} transactionType
 */
AddressTokensTransactionUnconfirmedToken.prototype['transactionType'] = undefined;

/**
 * The transaction ID used to create the token.
 * @member {String} createdByTransactionId
 */
AddressTokensTransactionUnconfirmedToken.prototype['createdByTransactionId'] = undefined;


AddressTokensTransactionUnconfirmedToken.OneOf = ["AddressTokensTransactionUnconfirmedErc20", "AddressTokensTransactionUnconfirmedErc721", "AddressTokensTransactionUnconfirmedOmni"];

export default AddressTokensTransactionUnconfirmedToken;

