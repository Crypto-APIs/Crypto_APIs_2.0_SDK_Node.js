/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetAssetDetailsByAssetIDRISC from './GetAssetDetailsByAssetIDRISC';

/**
 * The GetAssetDetailsByAssetIDRIS model module.
 * @module model/GetAssetDetailsByAssetIDRIS
 * @version 1.11.0
 */
class GetAssetDetailsByAssetIDRIS {
    /**
     * Constructs a new <code>GetAssetDetailsByAssetIDRIS</code>.
     * Represents a specific asset&#39;s data depending on its type (whether it is \&quot;crypto\&quot; or \&quot;fiat\&quot;).
     * @alias module:model/GetAssetDetailsByAssetIDRIS
     * @param {(module:model/GetAssetDetailsByAssetIDRISC)} instance The actual instance to initialize GetAssetDetailsByAssetIDRIS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "GetAssetDetailsByAssetIDRISC") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GetAssetDetailsByAssetIDRISC.validateJSON(instance); // throw an exception if no match
                // create GetAssetDetailsByAssetIDRISC from JS object
                this.actualInstance = GetAssetDetailsByAssetIDRISC.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GetAssetDetailsByAssetIDRISC
            errorMessages.push("Failed to construct GetAssetDetailsByAssetIDRISC: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetAssetDetailsByAssetIDRIS` with oneOf schemas GetAssetDetailsByAssetIDRISC. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetAssetDetailsByAssetIDRIS` with oneOf schemas GetAssetDetailsByAssetIDRISC. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetAssetDetailsByAssetIDRIS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAssetDetailsByAssetIDRIS} obj Optional instance to populate.
     * @return {module:model/GetAssetDetailsByAssetIDRIS} The populated <code>GetAssetDetailsByAssetIDRIS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetAssetDetailsByAssetIDRIS(data);
    }

    /**
     * Gets the actual instance, which can be <code>GetAssetDetailsByAssetIDRISC</code>.
     * @return {(module:model/GetAssetDetailsByAssetIDRISC)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>GetAssetDetailsByAssetIDRISC</code>.
     * @param {(module:model/GetAssetDetailsByAssetIDRISC)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetAssetDetailsByAssetIDRIS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetAssetDetailsByAssetIDRIS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetAssetDetailsByAssetIDRIS} An instance of GetAssetDetailsByAssetIDRIS.
     */
    static fromJSON = function(json_string){
        return GetAssetDetailsByAssetIDRIS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the percentage of the asset's current price against the its price from 1 hour ago.
 * @member {String} 1HourPriceChangeInPercentage
 */
GetAssetDetailsByAssetIDRIS.prototype['1HourPriceChangeInPercentage'] = undefined;

/**
 * Represents the percentage of the asset's current price against the its price from 1 week ago.
 * @member {String} 1WeekPriceChangeInPercentage
 */
GetAssetDetailsByAssetIDRIS.prototype['1WeekPriceChangeInPercentage'] = undefined;

/**
 * Represents the percentage of the asset's current price against the its price from 24 hours ago.
 * @member {String} 24HoursPriceChangeInPercentage
 */
GetAssetDetailsByAssetIDRIS.prototype['24HoursPriceChangeInPercentage'] = undefined;

/**
 * Represents the trading volume of the asset for the time frame of 24 hours.
 * @member {String} 24HoursTradingVolume
 */
GetAssetDetailsByAssetIDRIS.prototype['24HoursTradingVolume'] = undefined;

/**
 * Represent a subtype of the crypto assets. Could be COIN or TOKEN.
 * @member {module:model/GetAssetDetailsByAssetIDRIS.AssetTypeEnum} assetType
 */
GetAssetDetailsByAssetIDRIS.prototype['assetType'] = undefined;

/**
 * Represents the amount of the asset that is circulating on the market and in public hands.
 * @member {String} circulatingSupply
 */
GetAssetDetailsByAssetIDRIS.prototype['circulatingSupply'] = undefined;

/**
 * Defines the total market value of the asset's circulating supply in USD.
 * @member {String} marketCapInUSD
 */
GetAssetDetailsByAssetIDRIS.prototype['marketCapInUSD'] = undefined;

/**
 * Represents the maximum amount of all coins of a specific asset that will ever exist in its lifetime.
 * @member {String} maxSupply
 */
GetAssetDetailsByAssetIDRIS.prototype['maxSupply'] = undefined;


GetAssetDetailsByAssetIDRIS.OneOf = ["GetAssetDetailsByAssetIDRISC"];

export default GetAssetDetailsByAssetIDRIS;

