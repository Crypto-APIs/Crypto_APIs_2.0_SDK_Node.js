/**
 * CryptoAPIs
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListOmniTransactionsByAddressRIFee from './ListOmniTransactionsByAddressRIFee';
import ListOmniTransactionsByAddressRIRecipients from './ListOmniTransactionsByAddressRIRecipients';
import ListOmniTransactionsByAddressRISenders from './ListOmniTransactionsByAddressRISenders';

/**
 * The ListOmniTransactionsByAddressRI model module.
 * @module model/ListOmniTransactionsByAddressRI
 * @version 1.5.0
 */
class ListOmniTransactionsByAddressRI {
    /**
     * Constructs a new <code>ListOmniTransactionsByAddressRI</code>.
     * @alias module:model/ListOmniTransactionsByAddressRI
     * @param amount {String} Defines the amount of the sent tokens.
     * @param divisible {Boolean} Defines whether the attribute can be divisible or not, as boolean. E.g., if it is \"true\", the attribute is divisible.
     * @param minedInBlockHash {String} Represents the hash of the block where this transaction was mined/confirmed for first time. The hash is defined as a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
     * @param minedInBlockHeight {Number} Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.
     * @param propertyId {Number} Represents the identifier of the tokens to send.
     * @param recipients {Array.<module:model/ListOmniTransactionsByAddressRIRecipients>} Represents an object of addresses that receive the transactions.
     * @param senders {Array.<module:model/ListOmniTransactionsByAddressRISenders>} Represents an object of addresses that provide the funds.
     * @param timestamp {Number} Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
     * @param transactionId {String} Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.
     * @param type {String} Defines the type of the transaction as a string.
     * @param typeInt {Number} Defines the type of the transaction as a number.
     * @param valid {Boolean} Defines whether the transaction is valid or not, as boolean. E.g. if set to \"true\", it means the transaction is valid.
     * @param version {Number} Defines the specific version.
     * @param fee {module:model/ListOmniTransactionsByAddressRIFee} 
     */
    constructor(amount, divisible, minedInBlockHash, minedInBlockHeight, propertyId, recipients, senders, timestamp, transactionId, type, typeInt, valid, version, fee) { 
        
        ListOmniTransactionsByAddressRI.initialize(this, amount, divisible, minedInBlockHash, minedInBlockHeight, propertyId, recipients, senders, timestamp, transactionId, type, typeInt, valid, version, fee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, divisible, minedInBlockHash, minedInBlockHeight, propertyId, recipients, senders, timestamp, transactionId, type, typeInt, valid, version, fee) { 
        obj['amount'] = amount;
        obj['divisible'] = divisible;
        obj['minedInBlockHash'] = minedInBlockHash;
        obj['minedInBlockHeight'] = minedInBlockHeight;
        obj['propertyId'] = propertyId;
        obj['recipients'] = recipients;
        obj['senders'] = senders;
        obj['timestamp'] = timestamp;
        obj['transactionId'] = transactionId;
        obj['type'] = type;
        obj['typeInt'] = typeInt;
        obj['valid'] = valid;
        obj['version'] = version;
        obj['fee'] = fee;
    }

    /**
     * Constructs a <code>ListOmniTransactionsByAddressRI</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListOmniTransactionsByAddressRI} obj Optional instance to populate.
     * @return {module:model/ListOmniTransactionsByAddressRI} The populated <code>ListOmniTransactionsByAddressRI</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListOmniTransactionsByAddressRI();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('divisible')) {
                obj['divisible'] = ApiClient.convertToType(data['divisible'], 'Boolean');
            }
            if (data.hasOwnProperty('minedInBlockHash')) {
                obj['minedInBlockHash'] = ApiClient.convertToType(data['minedInBlockHash'], 'String');
            }
            if (data.hasOwnProperty('minedInBlockHeight')) {
                obj['minedInBlockHeight'] = ApiClient.convertToType(data['minedInBlockHeight'], 'Number');
            }
            if (data.hasOwnProperty('propertyId')) {
                obj['propertyId'] = ApiClient.convertToType(data['propertyId'], 'Number');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [ListOmniTransactionsByAddressRIRecipients]);
            }
            if (data.hasOwnProperty('senders')) {
                obj['senders'] = ApiClient.convertToType(data['senders'], [ListOmniTransactionsByAddressRISenders]);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeInt')) {
                obj['typeInt'] = ApiClient.convertToType(data['typeInt'], 'Number');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ListOmniTransactionsByAddressRIFee.constructFromObject(data['fee']);
            }
        }
        return obj;
    }


}

/**
 * Defines the amount of the sent tokens.
 * @member {String} amount
 */
ListOmniTransactionsByAddressRI.prototype['amount'] = undefined;

/**
 * Defines whether the attribute can be divisible or not, as boolean. E.g., if it is \"true\", the attribute is divisible.
 * @member {Boolean} divisible
 */
ListOmniTransactionsByAddressRI.prototype['divisible'] = undefined;

/**
 * Represents the hash of the block where this transaction was mined/confirmed for first time. The hash is defined as a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.
 * @member {String} minedInBlockHash
 */
ListOmniTransactionsByAddressRI.prototype['minedInBlockHash'] = undefined;

/**
 * Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.
 * @member {Number} minedInBlockHeight
 */
ListOmniTransactionsByAddressRI.prototype['minedInBlockHeight'] = undefined;

/**
 * Represents the identifier of the tokens to send.
 * @member {Number} propertyId
 */
ListOmniTransactionsByAddressRI.prototype['propertyId'] = undefined;

/**
 * Represents an object of addresses that receive the transactions.
 * @member {Array.<module:model/ListOmniTransactionsByAddressRIRecipients>} recipients
 */
ListOmniTransactionsByAddressRI.prototype['recipients'] = undefined;

/**
 * Represents an object of addresses that provide the funds.
 * @member {Array.<module:model/ListOmniTransactionsByAddressRISenders>} senders
 */
ListOmniTransactionsByAddressRI.prototype['senders'] = undefined;

/**
 * Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.
 * @member {Number} timestamp
 */
ListOmniTransactionsByAddressRI.prototype['timestamp'] = undefined;

/**
 * Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.
 * @member {String} transactionId
 */
ListOmniTransactionsByAddressRI.prototype['transactionId'] = undefined;

/**
 * Defines the type of the transaction as a string.
 * @member {String} type
 */
ListOmniTransactionsByAddressRI.prototype['type'] = undefined;

/**
 * Defines the type of the transaction as a number.
 * @member {Number} typeInt
 */
ListOmniTransactionsByAddressRI.prototype['typeInt'] = undefined;

/**
 * Defines whether the transaction is valid or not, as boolean. E.g. if set to \"true\", it means the transaction is valid.
 * @member {Boolean} valid
 */
ListOmniTransactionsByAddressRI.prototype['valid'] = undefined;

/**
 * Defines the specific version.
 * @member {Number} version
 */
ListOmniTransactionsByAddressRI.prototype['version'] = undefined;

/**
 * @member {module:model/ListOmniTransactionsByAddressRIFee} fee
 */
ListOmniTransactionsByAddressRI.prototype['fee'] = undefined;






export default ListOmniTransactionsByAddressRI;

