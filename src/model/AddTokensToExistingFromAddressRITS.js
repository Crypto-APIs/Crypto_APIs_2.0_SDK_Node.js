/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddTokensToExistingFromAddressRITSBOT from './AddTokensToExistingFromAddressRITSBOT';
import AddTokensToExistingFromAddressRITSET from './AddTokensToExistingFromAddressRITSET';

/**
 * The AddTokensToExistingFromAddressRITS model module.
 * @module model/AddTokensToExistingFromAddressRITS
 * @version 1.11.0
 */
class AddTokensToExistingFromAddressRITS {
    /**
     * Constructs a new <code>AddTokensToExistingFromAddressRITS</code>.
     * @alias module:model/AddTokensToExistingFromAddressRITS
     * @param {(module:model/AddTokensToExistingFromAddressRITSBOT|module:model/AddTokensToExistingFromAddressRITSET)} instance The actual instance to initialize AddTokensToExistingFromAddressRITS.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AddTokensToExistingFromAddressRITSBOT") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddTokensToExistingFromAddressRITSBOT.validateJSON(instance); // throw an exception if no match
                // create AddTokensToExistingFromAddressRITSBOT from JS object
                this.actualInstance = AddTokensToExistingFromAddressRITSBOT.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddTokensToExistingFromAddressRITSBOT
            errorMessages.push("Failed to construct AddTokensToExistingFromAddressRITSBOT: " + err)
        }

        try {
            if (typeof instance === "AddTokensToExistingFromAddressRITSET") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AddTokensToExistingFromAddressRITSET.validateJSON(instance); // throw an exception if no match
                // create AddTokensToExistingFromAddressRITSET from JS object
                this.actualInstance = AddTokensToExistingFromAddressRITSET.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddTokensToExistingFromAddressRITSET
            errorMessages.push("Failed to construct AddTokensToExistingFromAddressRITSET: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddTokensToExistingFromAddressRITS` with oneOf schemas AddTokensToExistingFromAddressRITSBOT, AddTokensToExistingFromAddressRITSET. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddTokensToExistingFromAddressRITS` with oneOf schemas AddTokensToExistingFromAddressRITSBOT, AddTokensToExistingFromAddressRITSET. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddTokensToExistingFromAddressRITS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddTokensToExistingFromAddressRITS} obj Optional instance to populate.
     * @return {module:model/AddTokensToExistingFromAddressRITS} The populated <code>AddTokensToExistingFromAddressRITS</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddTokensToExistingFromAddressRITS(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddTokensToExistingFromAddressRITSBOT</code>, <code>AddTokensToExistingFromAddressRITSET</code>.
     * @return {(module:model/AddTokensToExistingFromAddressRITSBOT|module:model/AddTokensToExistingFromAddressRITSET)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddTokensToExistingFromAddressRITSBOT</code>, <code>AddTokensToExistingFromAddressRITSET</code>.
     * @param {(module:model/AddTokensToExistingFromAddressRITSBOT|module:model/AddTokensToExistingFromAddressRITSET)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddTokensToExistingFromAddressRITS.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddTokensToExistingFromAddressRITS from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddTokensToExistingFromAddressRITS} An instance of AddTokensToExistingFromAddressRITS.
     */
    static fromJSON = function(json_string){
        return AddTokensToExistingFromAddressRITS.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Defines the `propertyId` of the Omni Layer token.
 * @member {Number} propertyId
 */
AddTokensToExistingFromAddressRITS.prototype['propertyId'] = undefined;

/**
 * Token contract address to be transferred
 * @member {String} contractAddress
 */
AddTokensToExistingFromAddressRITS.prototype['contractAddress'] = undefined;


AddTokensToExistingFromAddressRITS.OneOf = ["AddTokensToExistingFromAddressRITSBOT", "AddTokensToExistingFromAddressRITSET"];

export default AddTokensToExistingFromAddressRITS;

