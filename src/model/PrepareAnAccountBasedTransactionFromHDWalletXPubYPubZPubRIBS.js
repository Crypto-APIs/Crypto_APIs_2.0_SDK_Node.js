/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC from './PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC';
import PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE from './PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE';
import PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC from './PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC';
import PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee from './PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee';

/**
 * The PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS model module.
 * @module model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS
 * @version 1.9.0
 */
class PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS {
    /**
     * Constructs a new <code>PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS</code>.
     * @alias module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS
     * @implements module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE
     * @implements module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC
     * @implements module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC
     * @param dataHex {String} Representation of the data in hex value
     * @param derivationIndex {Number} Representation of the derivation index of the xpub address
     * @param fee {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee} 
     * @param nonce {String} Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
     * @param transactionType {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.TransactionTypeEnum} Representation of the transaction type
     * @param unit {String} Represents the unit of the amount to be sent.
     */
    constructor(dataHex, derivationIndex, fee, nonce, transactionType, unit) { 
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.initialize(this, dataHex, derivationIndex, fee, nonce, transactionType, unit);PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.initialize(this, dataHex, derivationIndex, fee, nonce, transactionType, unit);PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.initialize(this, dataHex, derivationIndex, fee, nonce, transactionType, unit);
        PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.initialize(this, dataHex, derivationIndex, fee, nonce, transactionType, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataHex, derivationIndex, fee, nonce, transactionType, unit) { 
        obj['dataHex'] = dataHex;
        obj['derivationIndex'] = derivationIndex;
        obj['fee'] = fee;
        obj['nonce'] = nonce;
        obj['transactionType'] = transactionType;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS} obj Optional instance to populate.
     * @return {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS} The populated <code>PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS();
            PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.constructFromObject(data, obj);
            PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.constructFromObject(data, obj);
            PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.constructFromObject(data, obj);

            if (data.hasOwnProperty('dataHex')) {
                obj['dataHex'] = ApiClient.convertToType(data['dataHex'], 'String');
            }
            if (data.hasOwnProperty('derivationIndex')) {
                obj['derivationIndex'] = ApiClient.convertToType(data['derivationIndex'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Representation of the data in hex value
 * @member {String} dataHex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['dataHex'] = undefined;

/**
 * Representation of the derivation index of the xpub address
 * @member {Number} derivationIndex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['derivationIndex'] = undefined;

/**
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee} fee
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['fee'] = undefined;

/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {String} nonce
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['nonce'] = undefined;

/**
 * Representation of the transaction type
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.TransactionTypeEnum} transactionType
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['transactionType'] = undefined;

/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS.prototype['unit'] = undefined;


// Implement PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE interface:
/**
 * Representation of the data in hex value
 * @member {String} dataHex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['dataHex'] = undefined;
/**
 * Representation of the derivation index of the xpub address
 * @member {Number} derivationIndex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['derivationIndex'] = undefined;
/**
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEFee} fee
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['fee'] = undefined;
/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {String} nonce
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['nonce'] = undefined;
/**
 * Representation of the transaction type
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.TransactionTypeEnum} transactionType
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['transactionType'] = undefined;
/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSE.prototype['unit'] = undefined;
// Implement PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC interface:
/**
 * Representation of the data in hex value
 * @member {String} dataHex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['dataHex'] = undefined;
/**
 * Representation of the derivation index of the xpub address
 * @member {Number} derivationIndex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['derivationIndex'] = undefined;
/**
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSCFee} fee
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['fee'] = undefined;
/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {String} nonce
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['nonce'] = undefined;
/**
 * Representation of the transaction type
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.TransactionTypeEnum} transactionType
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['transactionType'] = undefined;
/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSBSC.prototype['unit'] = undefined;
// Implement PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC interface:
/**
 * Representation of the data in hex value
 * @member {String} dataHex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['dataHex'] = undefined;
/**
 * Representation of the derivation index of the xpub address
 * @member {Number} derivationIndex
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['derivationIndex'] = undefined;
/**
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSECFee} fee
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['fee'] = undefined;
/**
 * Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
 * @member {String} nonce
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['nonce'] = undefined;
/**
 * Representation of the transaction type
 * @member {module:model/PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.TransactionTypeEnum} transactionType
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['transactionType'] = undefined;
/**
 * Represents the unit of the amount to be sent.
 * @member {String} unit
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBSEC.prototype['unit'] = undefined;



/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS['TransactionTypeEnum'] = {

    /**
     * value: "legacy-transaction"
     * @const
     */
    "legacy-transaction": "legacy-transaction"
};



export default PrepareAnAccountBasedTransactionFromHDWalletXPubYPubZPubRIBS;

