/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfirmedTokensTransactionForCertainAmountOrHigherBep20 from './ConfirmedTokensTransactionForCertainAmountOrHigherBep20';
import ConfirmedTokensTransactionForCertainAmountOrHigherErc20 from './ConfirmedTokensTransactionForCertainAmountOrHigherErc20';
import ConfirmedTokensTransactionForCertainAmountOrHigherErc721 from './ConfirmedTokensTransactionForCertainAmountOrHigherErc721';

/**
 * The ConfirmedTokensTransactionForCertainAmountOrHigherToken model module.
 * @module model/ConfirmedTokensTransactionForCertainAmountOrHigherToken
 * @version 1.11.0
 */
class ConfirmedTokensTransactionForCertainAmountOrHigherToken {
    /**
     * Constructs a new <code>ConfirmedTokensTransactionForCertainAmountOrHigherToken</code>.
     * @alias module:model/ConfirmedTokensTransactionForCertainAmountOrHigherToken
     * @param {(module:model/ConfirmedTokensTransactionForCertainAmountOrHigherBep20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc721)} instance The actual instance to initialize ConfirmedTokensTransactionForCertainAmountOrHigherToken.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ConfirmedTokensTransactionForCertainAmountOrHigherErc20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConfirmedTokensTransactionForCertainAmountOrHigherErc20.validateJSON(instance); // throw an exception if no match
                // create ConfirmedTokensTransactionForCertainAmountOrHigherErc20 from JS object
                this.actualInstance = ConfirmedTokensTransactionForCertainAmountOrHigherErc20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConfirmedTokensTransactionForCertainAmountOrHigherErc20
            errorMessages.push("Failed to construct ConfirmedTokensTransactionForCertainAmountOrHigherErc20: " + err)
        }

        try {
            if (typeof instance === "ConfirmedTokensTransactionForCertainAmountOrHigherErc721") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConfirmedTokensTransactionForCertainAmountOrHigherErc721.validateJSON(instance); // throw an exception if no match
                // create ConfirmedTokensTransactionForCertainAmountOrHigherErc721 from JS object
                this.actualInstance = ConfirmedTokensTransactionForCertainAmountOrHigherErc721.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConfirmedTokensTransactionForCertainAmountOrHigherErc721
            errorMessages.push("Failed to construct ConfirmedTokensTransactionForCertainAmountOrHigherErc721: " + err)
        }

        try {
            if (typeof instance === "ConfirmedTokensTransactionForCertainAmountOrHigherBep20") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConfirmedTokensTransactionForCertainAmountOrHigherBep20.validateJSON(instance); // throw an exception if no match
                // create ConfirmedTokensTransactionForCertainAmountOrHigherBep20 from JS object
                this.actualInstance = ConfirmedTokensTransactionForCertainAmountOrHigherBep20.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConfirmedTokensTransactionForCertainAmountOrHigherBep20
            errorMessages.push("Failed to construct ConfirmedTokensTransactionForCertainAmountOrHigherBep20: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ConfirmedTokensTransactionForCertainAmountOrHigherToken` with oneOf schemas ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ConfirmedTokensTransactionForCertainAmountOrHigherToken` with oneOf schemas ConfirmedTokensTransactionForCertainAmountOrHigherBep20, ConfirmedTokensTransactionForCertainAmountOrHigherErc20, ConfirmedTokensTransactionForCertainAmountOrHigherErc721. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ConfirmedTokensTransactionForCertainAmountOrHigherToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfirmedTokensTransactionForCertainAmountOrHigherToken} obj Optional instance to populate.
     * @return {module:model/ConfirmedTokensTransactionForCertainAmountOrHigherToken} The populated <code>ConfirmedTokensTransactionForCertainAmountOrHigherToken</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ConfirmedTokensTransactionForCertainAmountOrHigherToken(data);
    }

    /**
     * Gets the actual instance, which can be <code>ConfirmedTokensTransactionForCertainAmountOrHigherBep20</code>, <code>ConfirmedTokensTransactionForCertainAmountOrHigherErc20</code>, <code>ConfirmedTokensTransactionForCertainAmountOrHigherErc721</code>.
     * @return {(module:model/ConfirmedTokensTransactionForCertainAmountOrHigherBep20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc721)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ConfirmedTokensTransactionForCertainAmountOrHigherBep20</code>, <code>ConfirmedTokensTransactionForCertainAmountOrHigherErc20</code>, <code>ConfirmedTokensTransactionForCertainAmountOrHigherErc721</code>.
     * @param {(module:model/ConfirmedTokensTransactionForCertainAmountOrHigherBep20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc20|module:model/ConfirmedTokensTransactionForCertainAmountOrHigherErc721)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ConfirmedTokensTransactionForCertainAmountOrHigherToken.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ConfirmedTokensTransactionForCertainAmountOrHigherToken from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ConfirmedTokensTransactionForCertainAmountOrHigherToken} An instance of ConfirmedTokensTransactionForCertainAmountOrHigherToken.
     */
    static fromJSON = function(json_string){
        return ConfirmedTokensTransactionForCertainAmountOrHigherToken.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Specifies the name of the token.
 * @member {String} name
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['name'] = undefined;

/**
 * Specifies an identifier of the token, where up to five alphanumeric characters can be used for it.
 * @member {String} symbol
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['symbol'] = undefined;

/**
 * Defines how many decimals can be used to break the token.
 * @member {String} decimals
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['decimals'] = undefined;

/**
 * Defines the amount of tokens sent with the confirmed transaction.
 * @member {String} amount
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['amount'] = undefined;

/**
 * Defines the address of the contract.
 * @member {String} contractAddress
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['contractAddress'] = undefined;

/**
 * Specifies the ID of the token.
 * @member {String} tokenId
 */
ConfirmedTokensTransactionForCertainAmountOrHigherToken.prototype['tokenId'] = undefined;


ConfirmedTokensTransactionForCertainAmountOrHigherToken.OneOf = ["ConfirmedTokensTransactionForCertainAmountOrHigherBep20", "ConfirmedTokensTransactionForCertainAmountOrHigherErc20", "ConfirmedTokensTransactionForCertainAmountOrHigherErc721"];

export default ConfirmedTokensTransactionForCertainAmountOrHigherToken;

