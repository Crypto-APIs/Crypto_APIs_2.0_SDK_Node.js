/**
 * CryptoAPIs
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken from './CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken';
import CreateAutomaticTokensForwardingRBTokenDataEthereumToken from './CreateAutomaticTokensForwardingRBTokenDataEthereumToken';

/**
 * The CreateAutomaticTokensForwardingRBTokenData model module.
 * @module model/CreateAutomaticTokensForwardingRBTokenData
 * @version 1.11.0
 */
class CreateAutomaticTokensForwardingRBTokenData {
    /**
     * Constructs a new <code>CreateAutomaticTokensForwardingRBTokenData</code>.
     * @alias module:model/CreateAutomaticTokensForwardingRBTokenData
     * @param {(module:model/CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken|module:model/CreateAutomaticTokensForwardingRBTokenDataEthereumToken)} instance The actual instance to initialize CreateAutomaticTokensForwardingRBTokenData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken.validateJSON(instance); // throw an exception if no match
                // create CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken from JS object
                this.actualInstance = CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken
            errorMessages.push("Failed to construct CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken: " + err)
        }

        try {
            if (typeof instance === "CreateAutomaticTokensForwardingRBTokenDataEthereumToken") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateAutomaticTokensForwardingRBTokenDataEthereumToken.validateJSON(instance); // throw an exception if no match
                // create CreateAutomaticTokensForwardingRBTokenDataEthereumToken from JS object
                this.actualInstance = CreateAutomaticTokensForwardingRBTokenDataEthereumToken.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateAutomaticTokensForwardingRBTokenDataEthereumToken
            errorMessages.push("Failed to construct CreateAutomaticTokensForwardingRBTokenDataEthereumToken: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateAutomaticTokensForwardingRBTokenData` with oneOf schemas CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken, CreateAutomaticTokensForwardingRBTokenDataEthereumToken. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateAutomaticTokensForwardingRBTokenData` with oneOf schemas CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken, CreateAutomaticTokensForwardingRBTokenDataEthereumToken. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateAutomaticTokensForwardingRBTokenData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAutomaticTokensForwardingRBTokenData} obj Optional instance to populate.
     * @return {module:model/CreateAutomaticTokensForwardingRBTokenData} The populated <code>CreateAutomaticTokensForwardingRBTokenData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateAutomaticTokensForwardingRBTokenData(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken</code>, <code>CreateAutomaticTokensForwardingRBTokenDataEthereumToken</code>.
     * @return {(module:model/CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken|module:model/CreateAutomaticTokensForwardingRBTokenDataEthereumToken)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken</code>, <code>CreateAutomaticTokensForwardingRBTokenDataEthereumToken</code>.
     * @param {(module:model/CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken|module:model/CreateAutomaticTokensForwardingRBTokenDataEthereumToken)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateAutomaticTokensForwardingRBTokenData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateAutomaticTokensForwardingRBTokenData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateAutomaticTokensForwardingRBTokenData} An instance of CreateAutomaticTokensForwardingRBTokenData.
     */
    static fromJSON = function(json_string){
        return CreateAutomaticTokensForwardingRBTokenData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Represents the specific `propertyId` of the token data that will be forwarded.
 * @member {Number} propertyId
 */
CreateAutomaticTokensForwardingRBTokenData.prototype['propertyId'] = undefined;

/**
 * Represents the specific `contractAddress` of the Token that will be forwarded.
 * @member {String} contractAddress
 */
CreateAutomaticTokensForwardingRBTokenData.prototype['contractAddress'] = undefined;


CreateAutomaticTokensForwardingRBTokenData.OneOf = ["CreateAutomaticTokensForwardingRBTokenDataBitcoinOmniToken", "CreateAutomaticTokensForwardingRBTokenDataEthereumToken"];

export default CreateAutomaticTokensForwardingRBTokenData;

